/* eslint-disable max-len */
/**
 * API documentation
 * Access token is needed to use this API. To get a token, send a POST request with your email address to /api-users endpoint and one will be send to your. Each endpoint bellow has more information on how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.  You can find more documentation [here](https://laji.fi/about/806).  ##Endpoints  Observations and collections * Warehouse - Observation Data Warehouse API * Collection - Collection metadata * Source - Information sources (IT systems) * Annotation - Quality control   Taxonomy * Taxa - Taxonomy API * InformalTaxonGroup - Informal taxon groups are used in taxa and warehouse endpoints * Publication - Scientific publications * Checklist - Mainly you only work with one checklits: the FinBIF master checklist. There are others.   Other master data * Metadata - Variable descriptions * Area - Countries, municipalities and biogeographical provinces of Finland, etc. * Person - Information about people.   Helpers * APIUser - Register as an API user * Autocomplete - For making an autocomplete filed for taxa, collections or persons (friends) * PersonToken - Information about an authorized person   Vihko observation system * Form - Form definition * Document - Document instance of a form * Image - Image of a document   Laji.fi portal * Feedback - Feedback form API * Information - CMS content of information pages * Logger - Error logging from user's browsers to FinBIF * News - News
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { GatheringEvent } from './gatheringEvent';
import { Gathering } from './gathering';


export interface Document {
  /**
   * Unique ID for the object. This will be automatically generated.
   */
  id?: string;
  /**
   * Context for the given json
   */
  context?: string;

  /**
   * Leave empty if no sample taken, or if the sample is recorded separately
   */
  dNASampleLocation?: string;
  /**
   * IPEN Number for the accession
   */
  IPEN?: string;
  /**
   * URL where more information is available about the specimen
   */
  URL?: string;
  /**
   * QName for MZ.keyAny
   */
  acknowledgedWarnings?: Array<string>;
  /**
   * From who/where the specimen was acquired (if not recorded as a transaction)
   */
  acquiredFrom?: string;
  /**
   * Organization where the accession was acquired from. If the organization is not on the list, add it first.. QName for MOS.organization
   */
  acquiredFromOrganization?: string;
  /**
   * Date (d.m.yyyy) or year (yyyy) on which the specimen was acquired to the collection. Empty means an old specimen acquired on an unknown date.
   */
  acquisitionDate?: string;
  /**
   * Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)
   */
  additionalIDs?: Array<string>;
  /**
   * BOLD identifier, usually BOLD Sample ID. You can include additonal comment by separating them with colon, e.g. \\\"AY123456:comments here\\\"
   */
  bold?: Array<string>;
  caption?: string;
  /**
   * Clad book id number or such
   */
  cladBookID?: string;
  /**
   * Clad specimen id: usually color description and a number
   */
  cladSpecimenID?: string;
  /**
   * Verbatim specimen data from clad book
   */
  cladVerbatim?: string;
  /**
   * The collection which this specimen belongs to. QName for MY.collection
   */
  collectionID?: string;
  /**
   * Notes on the defects of the specimen (missing parts or such). Empty value means same as \\\"good\\\" or \\\"hyv√§\\\" - that there is nothing special to mention about the condition.
   */
  condition?: string;
  /**
   * QName for MA.person
   */
  creator?: string;
  /**
   * Annuality/perenniality or other specialities about cultivation in our conditions.
   */
  cultivationInformation?: string;
  dataOrigin?: Array<string>;
  /**
   * Where the data about this specimen is from, in addition to labels. Eg. Field notes, expedition journals.
   */
  dataSource?: string;
  /**
   * The dataset(s) this specimen belongs to. QName for GX.dataset
   */
  datasetID?: Array<string>;
  datatype?: string;
  /**
   * dateTime string using ISO8601 format
   */
  dateCreated?: string;
  /**
   * dateTime string using ISO8601 format
   */
  dateEdited?: string;
  deviceID?: string;
  /**
   * Location of the specimen so that museum personnel can find it. E.g. taxon under which it is stored (if not clear from the identification), or shelf number
   */
  documentLocation?: string;
  /**
   * Description where duplicates (specimens of the same individual) are located or have been sent to and by which ID's.
   */
  duplicatesIn?: string;
  /**
   * Reason for this edit or notes about it.
   */
  editNotes?: string;
  /**
   * Name of the person(s) (and possibly the organization) who first transcribed the data
   */
  editor?: string;
  /**
   * QName for MA.person
   */
  editors?: Array<string>;
  /**
   * Date the data was first transcribed into electronic format or paper registry
   */
  entered?: string;
  /**
   * Free-text diary-style information about what has been done to the specimen and when.
   */
  event?: Array<string>;
  /**
   * Name of the exsiccatum this specimen belongs to and possible exsiccatum number.
   */
  exsiccatum?: string;
  /**
   * Id of the form that was used for the document
   */
  formID?: string;
  /**
   * QName for MY.gathering
   */
  gathering?: Array<string>;
  /**
   * instance of gatheringEvent
   */
  gatheringEvent?: GatheringEvent;
  /**
   * Array of gatherings
   */
  gatherings?: Array<Gathering>;
  /**
   * Genbank identifier. You can include additonal comment by separating them with colon, e.g. \\\"AY123456:comments here\\\"
   */
  genbank?: Array<string>;
  /**
   * QName for MY.gathering
   */
  hasGathering?: Array<string>;
  /**
   * QName for MM.image
   */
  images?: Array<string>;
  isTemplate?: boolean;
  keywords?: Array<string>;
  /**
   * All text from labels word-for-word, including spelling errors. Separate each label on its own row, starting from topmost label.
   */
  labelsVerbatim?: string;
  /**
   * Language the data is (mainly) written in, if applicable.
   */
  language?: string;
  /**
   * Collector's identifier (field identifier, keruunumero) for the specimen
   */
  legID?: string;
  locked?: boolean;
  /**
   * QName for MNP.namedPlace
   */
  namedPlaceID?: string;
  /**
   * Additional information to the data in each section.
   */
  notes?: string;
  /**
   * Original catalogue number or other  original identifier of the specimen. E.g. H9000000
   */
  originalSpecimenID?: string;
  /**
   * Team or organisation that owns the record and can edit it.. QName for MOS.organization
   */
  owner?: string;
  /**
   * Garden area where this accession is planned to be located.
   */
  plannedLocation?: string;
  /**
   * Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.
   */
  preservation?: Array<string>;
  /**
   * Location of the primary data if not Kotka.
   */
  primaryDataLocation?: string;
  privateNotes?: string;
  /**
   * Publication references or doi's that refer to this specimen
   */
  publication?: Array<string>;
  /**
   * PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
   */
  publicityRestrictions?: Document.PublicityRestrictionsEnum;
  /**
   * Relationship to another taxon OR specimen. Choose relationship type as prefix and give taxon name or specimen identifier thereafter, e.g. \\\"parasite: Parasiticus specius\\\" OR \\\"host:http://tun.fi/JAA.123\\\"
   */
  relationship?: Array<string>;
  /**
   * The history of the specimen, for example how it was acquired or in which museums it has been before.
   */
  sampleHistory?: string;
  scheduledForDeletion?: boolean;
  /**
   * Secure level (salaus-/karkeistustaso) for the data
   */
  secureLevel?: Document.SecureLevelEnum;
  /**
   * ID of the specimen from which this has been separated
   */
  separatedFrom?: string;
  /**
   * ID's of those new specimens that have been separated from this specimen
   */
  separatedTo?: Array<string>;
  serialNumber?: string;
  /**
   * QName for KE.informationSystem
   */
  sourceID?: string;
  /**
   * Empty value means same as \\\"ok\\\" - that there is not anything special about the status of the specimen.
   */
  status?: Document.StatusEnum;
  temp?: boolean;
  templateDescription?: string;
  templateName?: string;
  /**
   * Additional information regarding the data entry or transcription process, e.g. unclarities, explanations for interpretations,
   */
  transcriberNotes?: string;
  /**
   * Common name of agreement concerning the transfer, if any.
   */
  transferAgreement?: string;
  /**
   * List of those fields that contain unreliable data. The list is created automatically.
   */
  unreliableFields?: string;
  /**
   * Information about the quality of the specimen data. Possible to select several. Empty value means same as OK.
   */
  verificationStatus?: Array<string>;
  /**
   * Identifier of the herbarium voucher specimen or information about it if the identifier is unknown.
   */
  voucherSpecimenID?: string;
}

export namespace Document {
  export type PublicityRestrictionsEnum =
    'MZ.publicityRestrictionsPublic'
    | 'MZ.publicityRestrictionsProtected'
    | 'MZ.publicityRestrictionsPrivate';
  export const PublicityRestrictionsEnum = {
    PublicityRestrictionsPublic: 'MZ.publicityRestrictionsPublic' as PublicityRestrictionsEnum,
    PublicityRestrictionsProtected: 'MZ.publicityRestrictionsProtected' as PublicityRestrictionsEnum,
    PublicityRestrictionsPrivate: 'MZ.publicityRestrictionsPrivate' as PublicityRestrictionsEnum
  };
  export type SecureLevelEnum =
    'MX.secureLevelNone'
    | 'MX.secureLevelKM1'
    | 'MX.secureLevelKM5'
    | 'MX.secureLevelKM10'
    | 'MX.secureLevelKM25'
    | 'MX.secureLevelKM50'
    | 'MX.secureLevelKM100'
    | 'MX.secureLevelHighest'
    | 'MX.secureLevelNoShow';
  export const SecureLevelEnum = {
    SecureLevelNone: 'MX.secureLevelNone' as SecureLevelEnum,
    SecureLevelKM1: 'MX.secureLevelKM1' as SecureLevelEnum,
    SecureLevelKM5: 'MX.secureLevelKM5' as SecureLevelEnum,
    SecureLevelKM10: 'MX.secureLevelKM10' as SecureLevelEnum,
    SecureLevelKM25: 'MX.secureLevelKM25' as SecureLevelEnum,
    SecureLevelKM50: 'MX.secureLevelKM50' as SecureLevelEnum,
    SecureLevelKM100: 'MX.secureLevelKM100' as SecureLevelEnum,
    SecureLevelHighest: 'MX.secureLevelHighest' as SecureLevelEnum,
    SecureLevelNoShow: 'MX.secureLevelNoShow' as SecureLevelEnum
  };
  export type StatusEnum =
    'MY.statusOk'
    | 'MY.statusMissing'
    | 'MY.statusUnrecoverable'
    | 'MY.statusLost'
    | 'MY.statusDonated'
    | 'MY.statusDeposited'
    | 'MY.statusDeaccessioned'
    | 'MY.statusDiscarded'
    | 'MY.statusSpent'
    | 'MY.statusDestroyed'
    | 'MY.statusUndefined'
    | 'MY.statusAxenic'
    | 'MY.statusNonAxenic'
    | 'MY.statusNotAvailable'
    | 'MY.statusDead';
  export const StatusEnum = {
    StatusOk: 'MY.statusOk' as StatusEnum,
    StatusMissing: 'MY.statusMissing' as StatusEnum,
    StatusUnrecoverable: 'MY.statusUnrecoverable' as StatusEnum,
    StatusLost: 'MY.statusLost' as StatusEnum,
    StatusDonated: 'MY.statusDonated' as StatusEnum,
    StatusDeposited: 'MY.statusDeposited' as StatusEnum,
    StatusDeaccessioned: 'MY.statusDeaccessioned' as StatusEnum,
    StatusDiscarded: 'MY.statusDiscarded' as StatusEnum,
    StatusSpent: 'MY.statusSpent' as StatusEnum,
    StatusDestroyed: 'MY.statusDestroyed' as StatusEnum,
    StatusUndefined: 'MY.statusUndefined' as StatusEnum,
    StatusAxenic: 'MY.statusAxenic' as StatusEnum,
    StatusNonAxenic: 'MY.statusNonAxenic' as StatusEnum,
    StatusNotAvailable: 'MY.statusNotAvailable' as StatusEnum,
    StatusDead: 'MY.statusDead' as StatusEnum
  };
}
