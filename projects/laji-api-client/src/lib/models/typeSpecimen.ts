/* tslint:disable:max-line-length */
/**
 * API documentation
 * Access token is needed to use this API. To get a token, send a POST request with your email address to /api-users endpoint and one will be send to your. Each endpoint bellow has more information on how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.  You can find more documentation [here](https://laji.fi/about/806).  ##Endpoints  Observations and collections * Warehouse - Observation Data Warehouse API * Collection - Collection metadata * Source - Information sources (IT systems) * Annotation - Quality control   Taxonomy * Taxa - Taxonomy API * InformalTaxonGroup - Informal taxon groups are used in taxa and warehouse endpoints * Publication - Scientific publications * Checklist - Mainly you only work with one checklits: the FinBIF master checklist. There are others.   Other master data * Metadata - Variable descriptions * Area - Countries, municipalities and biogeographical provinces of Finland, etc. * Person - Information about people.   Helpers * APIUser - Register as an API user * Autocomplete - For making an autocomplete filed for taxa, collections or persons (friends) * PersonToken - Information about an authorized person   Vihko observation system * Form - Form definition * Document - Document instance of a form * Image - Image of a document   Laji.fi portal * Feedback - Feedback form API * Information - CMS content of information pages * Logger - Error logging from user's browsers to FinBIF * News - News
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


export interface TypeSpecimen {
  /**
   * Context for the given json
   */
  context?: string;

  /**
   * Unique ID for the object. This will be automatically generated.
   */
  id?: string;
  /**
   * PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
   */
  publicityRestrictions?: TypeSpecimen.PublicityRestrictionsEnum;
  /**
   * Author of the type species
   */
  typeAuthor?: string;
  /**
   * Publication reference for original description or basionyme
   */
  typeBasionymePubl?: string;
  /**
   * Additional information on the type
   */
  typeNotes?: string;
  /**
   * Publication reference for type publication
   */
  typePubl?: string;
  /**
   * ID for the type series, if part of one
   */
  typeSeriesID?: string;
  /**
   * Name of the type species
   */
  typeSpecies?: string;
  /**
   * Is this holotype, paratype, syntype etc...
   */
  typeStatus?: TypeSpecimen.TypeStatusEnum;
  /**
   * Name of the type subspecies
   */
  typeSubspecies?: string;
  /**
   * Author of the type subspecies
   */
  typeSubspeciesAuthor?: string;
  /**
   * Verification whether this really is a type?
   */
  typeVerification?: TypeSpecimen.TypeVerificationEnum;
  /**
   * Name of the person who chose the type, preferably in the format \\\"Lastname, firstname\\\"
   */
  typif?: string;
  /**
   * Date when the specimen was chosen as a type
   */
  typifDate?: string;
}

export namespace TypeSpecimen {
  export type PublicityRestrictionsEnum =
    'MZ.publicityRestrictionsPublic'
    | 'MZ.publicityRestrictionsProtected'
    | 'MZ.publicityRestrictionsPrivate';
  export const PublicityRestrictionsEnum = {
    PublicityRestrictionsPublic: 'MZ.publicityRestrictionsPublic' as PublicityRestrictionsEnum,
    PublicityRestrictionsProtected: 'MZ.publicityRestrictionsProtected' as PublicityRestrictionsEnum,
    PublicityRestrictionsPrivate: 'MZ.publicityRestrictionsPrivate' as PublicityRestrictionsEnum
  };
  export type TypeStatusEnum =
    'MY.typeStatusType'
    | 'MY.typeStatusHolotype'
    | 'MY.typeStatusSyntype'
    | 'MY.typeStatusParatype'
    | 'MY.typeStatusLectotype'
    | 'MY.typeStatusParalectotype'
    | 'MY.typeStatusNeotype'
    | 'MY.typeStatusAllotype'
    | 'MY.typeStatusNeoallotype'
    | 'MY.typeStatusIsotype'
    | 'MY.typeStatusEpitype'
    | 'MY.typeStatusIsolectotype'
    | 'MY.typeStatusIsoepitype'
    | 'MY.typeStatusIsoneotype'
    | 'MY.typeStatusIsoparatype'
    | 'MY.typeStatusIsosyntype'
    | 'MY.typeStatusOriginalMaterial'
    | 'MY.typeStatusCotype'
    | 'MY.typeStatusTopotype'
    | 'MY.typeStatusHomotype'
    | 'MY.typeStatusNo'
    | 'MY.typeStatusPossible'
    | 'MY.typeStatusObscure'
    | 'MY.typeStatusTypeStrain'
    | 'MY.typeStatusPathovarReferenceStrain';
  export const TypeStatusEnum = {
    TypeStatusType: 'MY.typeStatusType' as TypeStatusEnum,
    TypeStatusHolotype: 'MY.typeStatusHolotype' as TypeStatusEnum,
    TypeStatusSyntype: 'MY.typeStatusSyntype' as TypeStatusEnum,
    TypeStatusParatype: 'MY.typeStatusParatype' as TypeStatusEnum,
    TypeStatusLectotype: 'MY.typeStatusLectotype' as TypeStatusEnum,
    TypeStatusParalectotype: 'MY.typeStatusParalectotype' as TypeStatusEnum,
    TypeStatusNeotype: 'MY.typeStatusNeotype' as TypeStatusEnum,
    TypeStatusAllotype: 'MY.typeStatusAllotype' as TypeStatusEnum,
    TypeStatusNeoallotype: 'MY.typeStatusNeoallotype' as TypeStatusEnum,
    TypeStatusIsotype: 'MY.typeStatusIsotype' as TypeStatusEnum,
    TypeStatusEpitype: 'MY.typeStatusEpitype' as TypeStatusEnum,
    TypeStatusIsolectotype: 'MY.typeStatusIsolectotype' as TypeStatusEnum,
    TypeStatusIsoepitype: 'MY.typeStatusIsoepitype' as TypeStatusEnum,
    TypeStatusIsoneotype: 'MY.typeStatusIsoneotype' as TypeStatusEnum,
    TypeStatusIsoparatype: 'MY.typeStatusIsoparatype' as TypeStatusEnum,
    TypeStatusIsosyntype: 'MY.typeStatusIsosyntype' as TypeStatusEnum,
    TypeStatusOriginalMaterial: 'MY.typeStatusOriginalMaterial' as TypeStatusEnum,
    TypeStatusCotype: 'MY.typeStatusCotype' as TypeStatusEnum,
    TypeStatusTopotype: 'MY.typeStatusTopotype' as TypeStatusEnum,
    TypeStatusHomotype: 'MY.typeStatusHomotype' as TypeStatusEnum,
    TypeStatusNo: 'MY.typeStatusNo' as TypeStatusEnum,
    TypeStatusPossible: 'MY.typeStatusPossible' as TypeStatusEnum,
    TypeStatusObscure: 'MY.typeStatusObscure' as TypeStatusEnum,
    TypeStatusTypeStrain: 'MY.typeStatusTypeStrain' as TypeStatusEnum,
    TypeStatusPathovarReferenceStrain: 'MY.typeStatusPathovarReferenceStrain' as TypeStatusEnum
  };
  export type TypeVerificationEnum =
    'MY.typeVerificationVerified'
    | 'MY.typeVerificationUnverified'
    | 'MY.typeVerificationProbable'
    | 'MY.typeVerificationDoubtful';
  export const TypeVerificationEnum = {
    TypeVerificationVerified: 'MY.typeVerificationVerified' as TypeVerificationEnum,
    TypeVerificationUnverified: 'MY.typeVerificationUnverified' as TypeVerificationEnum,
    TypeVerificationProbable: 'MY.typeVerificationProbable' as TypeVerificationEnum,
    TypeVerificationDoubtful: 'MY.typeVerificationDoubtful' as TypeVerificationEnum
  };
}
