/* eslint-disable max-len */  /**
 * API documentation
 * Access token is needed to use this API. To get a token, send a POST request with your email address to /api-users endpoint and one will be send to your. Each endpoint bellow has more information on how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.  You can find more documentation [here](https://laji.fi/about/806).  ##Endpoints  Observations and collections * Warehouse - Observation Data Warehouse API * Collection - Collection metadata * Source - Information sources (IT systems) * Annotation - Quality control   Taxonomy * Taxa - Taxonomy API * InformalTaxonGroup - Informal taxon groups are used in taxa and warehouse endpoints * Publication - Scientific publications * Checklist - Mainly you only work with one checklits: the FinBIF master checklist. There are others.   Other master data * Metadata - Variable descriptions * Area - Countries, municipalities and biogeographical provinces of Finland, etc. * Person - Information about people.   Helpers * APIUser - Register as an API user * Autocomplete - For making an autocomplete filed for taxa, collections or persons (friends) * PersonToken - Information about an authorized person   Vihko observation system * Form - Form definition * Document - Document instance of a form * Image - Image of a document   Laji.fi portal * Feedback - Feedback form API * Information - CMS content of information pages * Logger - Error logging from user's browsers to FinBIF * News - News
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { TaxaDescription } from './taxaDescription';
import { TaxaMedia } from './taxaMedia';


export interface Taxon {
  id: string;
  herbosortOrder?: number;
  /**
   * <p>Lisämerkinnät:</p> <ul>  <li><b>v - vanhat metsät</b> (myös yksittäiset vanhat puut ja runsaasti lahopuuta sisältävät nuoremmat metsät)</li> <li><b>h - harjumetsät</b>, myös puoliavoimet</li> <li><b>p - metsäpaloalueet</b> ja muut luontaisen sukkession alkuvaiheen metsät</li> <li><b>j - jalopuuesiintymä</b></li> <li><b>pa - paahteinen</b></li> <li><b>va - varjoinen</b></li> <li><b>ra - sijaitsee rannalla</b> (lajin esiintyminen on sidoksissa rannan läheisyyteen)</li> <li><b>ka - karut kalliot ja kivikot</b></li> <li><b>ke - keskiravinteiset kalliot ja kivikot</b></li> <li><b>ca - kalkkivaikutteinen</b></li> </ul>
   */
  primaryHabitat?: string;
  secondaryHabitat?: Array<string>;
  /**
   * Identifier of this taxon concept/name in other systems/sources
   */
  additionalID?: Array<string>;
  /**
   * Leväosakkaiden kuvaus
   */
  algalPartnerOfLichen?: string;
  alsoKnownAs?: Array<string>;
  /**
   * Lajin elintavat
   */
  behaviour?: string;
  birdlifeCode?: string;
  breedingSecureLevel?: Taxon.BreedingSecureLevelEnum;
  circumscription?: string;
  cultivationText?: string;
  customReportFormLink?: string;
  distributionFinland?: string;
  distributionMapFinland?: string;
  /**
   * Lajin ekologian sekalainen kuvaus
   */
  ecology?: string;
  economicUseText?: string;
  etymologyText?: string;
  euringCode?: string;
  externalLinkURL?: string;
  /**
   * taxon occurs in Finland
   */
  finnish?: boolean;
  frequencyScoringPoints?: number;
  growthFormAndGrowthHabit?: string;
  /**
   * Lajin elinympäristö
   */
  habitat?: string;
  /**
   * Lajin kasvialusta
   */
  habitatSubstrate?: string;
  hasAlternativeName?: Array<string>;
  /**
   * Should this taxon be hidden when showing contents of a checklist (publicly)?
   */
  hiddenTaxon?: boolean;
  identificationText?: string;
  ingressText?: string;
  invasiveCitizenActionsText?: string;
  invasiveEffectText?: string;
  invasivePreventionMethodsText?: string;
  invasiveSpeciesClassificationDescription?: string;
  invasiveSpeciesEarlyWarning?: boolean;
  invasiveSpeciesEstablishment?: Taxon.InvasiveSpeciesEstablishmentEnum;
  isPartOf?: string;
  isPartOfInformalTaxonGroup?: Array<string>;
  /**
   * Eliön elinkierto
   */
  lifeCycle?: string;
  management?: string;
  miscText?: string;
  nameAccordingTo?: string;
  nameDecidedBy?: string;
  nameDecidedDate?: Date;
  naturaAreaSecureLevel?: Taxon.NaturaAreaSecureLevelEnum;
  nestSiteSecureLevel?: Taxon.NestSiteSecureLevelEnum;
  notes?: string;
  /**
   *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
   */
  obsoleteVernacularName?: Array<string>;
  occurrenceInFinland?: Taxon.OccurrenceInFinlandEnum;
  occurrenceInFinlandPublication?: Array<string>;
  occurrenceInFinlandSpecimenURI?: string;
  originAndDistributionText?: string;
  originalDescription?: string;
  originalPublication?: Array<string>;
  overridingTargetName?: Array<string>;
  productionText?: string;
  redListStatus2000Finland?: Taxon.RedListStatus2000FinlandEnum;
  redListStatus2010Finland?: Taxon.RedListStatus2010FinlandEnum;
  redListStatus2015Finland?: Taxon.RedListStatus2015FinlandEnum;
  redListStatus2019Finland?: Taxon.RedListStatus2019FinlandEnum;
  reproduction?: string;
  /**
   * Kukinta-aika
   */
  reproductionFloweringTime?: string;
  /**
   * Pölytyksen kuvaus
   */
  reproductionPollination?: string;
  scientificName?: string;
  scientificNameAuthorship?: string;
  /**
   * Secure level (salaus-/karkeistustaso) for the data
   */
  secureLevel?: Taxon.SecureLevelEnum;
  speciesCardAuthors?: string;
  stopOccurrenceInFinlandPublicationInheritance?: boolean;
  stopOriginalPublicationInheritance?: boolean;
  targetName?: Array<string>;
  taxonEditor?: Array<string>;
  taxonExpert?: Array<string>;
  taxonRank?: Taxon.TaxonRankEnum;
  taxonomyText?: string;
  tradeName?: Array<string>;
  typeOfOccurrenceInFinland?: Array<string>;
  typeOfOccurrenceInFinlandNotes?: string;
  typeSpecimenURI?: string;
  /**
   *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
   */
  vernacularName?: string;
  winteringSecureLevel?: Taxon.WinteringSecureLevelEnum;
  createdAtTimestamp?: number;
  synonymNames?: Array<string>;
  misappliedListNames?: Array<string>;
  informalTaxonGroups?: Array<string>;
  occurrences?: Array<any>;
  multimedia?: Array<TaxaMedia>;
  descriptions?: Array<TaxaDescription>;
  synonyms?: Array<Taxon>;
  misappliedNames?: Array<Taxon>;
  misspelledNames?: Array<Taxon>;
  basionyms?: Array<Taxon>;
  objectiveSynonyms?: Array<Taxon>;
  subjectiveSynonyms?: Array<Taxon>;
  orthographicVariants?: Array<Taxon>;
  homotypicSynonyms?: Array<Taxon>;
  heterotypicSynonyms?: Array<Taxon>;
  uncertainSynonyms?: Array<Taxon>;
  includes?: Array<Taxon>;
  includedIn?: Array<Taxon>;
  children?: Array<Taxon>;
  administrativeStatuses?: Array<string>;
  species?: boolean;
  invasiveSpecies?: boolean;
  /**
   * should the name appear cursive
   */
  cursiveName?: boolean;
  countOfSpecies?: number;
  countOfFinnishSpecies?: number;
  /**
   * is taxon species or subspecies or etc and occurs in Finland
   */
  finnishSpecies?: boolean;
  /**
   * stable in Finland
   */
  stableInFinland?: boolean;
  expertChangesFromParent?: boolean;
  /**
   * sort order for taxonomic sorting
   */
  taxonomicSortOrder?: number;
  /**
   * true if has parents
   */
  hasParent?: boolean;
  /**
   * true if has children
   */
  hasChildren?: boolean;
  latestRedListStatusFinland?: any;
  redListStatusesInFinland?: Array<any>;
  additionalIds?: Array<string>;
}

export namespace Taxon {
  export type BreedingSecureLevelEnum =
    'MX.secureLevelNone'
    | 'MX.secureLevelKM1'
    | 'MX.secureLevelKM5'
    | 'MX.secureLevelKM10'
    | 'MX.secureLevelKM25'
    | 'MX.secureLevelKM50'
    | 'MX.secureLevelKM100'
    | 'MX.secureLevelHighest'
    | 'MX.secureLevelNoShow';
  export const BreedingSecureLevelEnum = {
    SecureLevelNone: 'MX.secureLevelNone' as BreedingSecureLevelEnum,
    SecureLevelKM1: 'MX.secureLevelKM1' as BreedingSecureLevelEnum,
    SecureLevelKM5: 'MX.secureLevelKM5' as BreedingSecureLevelEnum,
    SecureLevelKM10: 'MX.secureLevelKM10' as BreedingSecureLevelEnum,
    SecureLevelKM25: 'MX.secureLevelKM25' as BreedingSecureLevelEnum,
    SecureLevelKM50: 'MX.secureLevelKM50' as BreedingSecureLevelEnum,
    SecureLevelKM100: 'MX.secureLevelKM100' as BreedingSecureLevelEnum,
    SecureLevelHighest: 'MX.secureLevelHighest' as BreedingSecureLevelEnum,
    SecureLevelNoShow: 'MX.secureLevelNoShow' as BreedingSecureLevelEnum
  };
  export type InvasiveSpeciesEstablishmentEnum =
    'MX.invasiveEstablished'
    | 'MX.invasiveSporadic'
    | 'MX.invasiveNotYetInFinland'
    | 'MX.invasiveEstablishmentUnknown'
    | 'MX.invasiveEstablishmentAccidental';
  export const InvasiveSpeciesEstablishmentEnum = {
    InvasiveEstablished: 'MX.invasiveEstablished' as InvasiveSpeciesEstablishmentEnum,
    InvasiveSporadic: 'MX.invasiveSporadic' as InvasiveSpeciesEstablishmentEnum,
    InvasiveNotYetInFinland: 'MX.invasiveNotYetInFinland' as InvasiveSpeciesEstablishmentEnum,
    InvasiveEstablishmentUnknown: 'MX.invasiveEstablishmentUnknown' as InvasiveSpeciesEstablishmentEnum,
    InvasiveEstablishmentAccidental: 'MX.invasiveEstablishmentAccidental' as InvasiveSpeciesEstablishmentEnum
  };
  export type NaturaAreaSecureLevelEnum =
    'MX.secureLevelNone'
    | 'MX.secureLevelKM1'
    | 'MX.secureLevelKM5'
    | 'MX.secureLevelKM10'
    | 'MX.secureLevelKM25'
    | 'MX.secureLevelKM50'
    | 'MX.secureLevelKM100'
    | 'MX.secureLevelHighest'
    | 'MX.secureLevelNoShow';
  export const NaturaAreaSecureLevelEnum = {
    SecureLevelNone: 'MX.secureLevelNone' as NaturaAreaSecureLevelEnum,
    SecureLevelKM1: 'MX.secureLevelKM1' as NaturaAreaSecureLevelEnum,
    SecureLevelKM5: 'MX.secureLevelKM5' as NaturaAreaSecureLevelEnum,
    SecureLevelKM10: 'MX.secureLevelKM10' as NaturaAreaSecureLevelEnum,
    SecureLevelKM25: 'MX.secureLevelKM25' as NaturaAreaSecureLevelEnum,
    SecureLevelKM50: 'MX.secureLevelKM50' as NaturaAreaSecureLevelEnum,
    SecureLevelKM100: 'MX.secureLevelKM100' as NaturaAreaSecureLevelEnum,
    SecureLevelHighest: 'MX.secureLevelHighest' as NaturaAreaSecureLevelEnum,
    SecureLevelNoShow: 'MX.secureLevelNoShow' as NaturaAreaSecureLevelEnum
  };
  export type NestSiteSecureLevelEnum =
    'MX.secureLevelNone'
    | 'MX.secureLevelKM1'
    | 'MX.secureLevelKM5'
    | 'MX.secureLevelKM10'
    | 'MX.secureLevelKM25'
    | 'MX.secureLevelKM50'
    | 'MX.secureLevelKM100'
    | 'MX.secureLevelHighest'
    | 'MX.secureLevelNoShow';
  export const NestSiteSecureLevelEnum = {
    SecureLevelNone: 'MX.secureLevelNone' as NestSiteSecureLevelEnum,
    SecureLevelKM1: 'MX.secureLevelKM1' as NestSiteSecureLevelEnum,
    SecureLevelKM5: 'MX.secureLevelKM5' as NestSiteSecureLevelEnum,
    SecureLevelKM10: 'MX.secureLevelKM10' as NestSiteSecureLevelEnum,
    SecureLevelKM25: 'MX.secureLevelKM25' as NestSiteSecureLevelEnum,
    SecureLevelKM50: 'MX.secureLevelKM50' as NestSiteSecureLevelEnum,
    SecureLevelKM100: 'MX.secureLevelKM100' as NestSiteSecureLevelEnum,
    SecureLevelHighest: 'MX.secureLevelHighest' as NestSiteSecureLevelEnum,
    SecureLevelNoShow: 'MX.secureLevelNoShow' as NestSiteSecureLevelEnum
  };
  export type OccurrenceInFinlandEnum =
    'MX.doesNotOccur'
    | 'MX.occurrenceInFinlandPublished'
    | 'MX.occurrenceInFinlandCollected'
    | 'MX.occurrenceInFinlandObserved'
    | 'MX.occurrenceInFinlandPublishedUncertain'
    | 'MX.occurrenceInFinlandCollectedUncertain'
    | 'MX.occurrenceInFinlandObservedUncertain'
    | 'MX.occurrenceInFinlandPublishedError'
    | 'MX.occurrenceInFinlandPresumed';
  export const OccurrenceInFinlandEnum = {
    DoesNotOccur: 'MX.doesNotOccur' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandPublished: 'MX.occurrenceInFinlandPublished' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandCollected: 'MX.occurrenceInFinlandCollected' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandObserved: 'MX.occurrenceInFinlandObserved' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandPublishedUncertain: 'MX.occurrenceInFinlandPublishedUncertain' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandCollectedUncertain: 'MX.occurrenceInFinlandCollectedUncertain' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandObservedUncertain: 'MX.occurrenceInFinlandObservedUncertain' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandPublishedError: 'MX.occurrenceInFinlandPublishedError' as OccurrenceInFinlandEnum,
    OccurrenceInFinlandPresumed: 'MX.occurrenceInFinlandPresumed' as OccurrenceInFinlandEnum
  };
  export type RedListStatus2000FinlandEnum =
    'MX.iucnEX'
    | 'MX.iucnEW'
    | 'MX.iucnRE'
    | 'MX.iucnCR'
    | 'MX.iucnEN'
    | 'MX.iucnVU'
    | 'MX.iucnNT'
    | 'MX.iucnLC'
    | 'MX.iucnDD'
    | 'MX.iucnNA'
    | 'MX.iucnNE';
  export const RedListStatus2000FinlandEnum = {
    IucnEX: 'MX.iucnEX' as RedListStatus2000FinlandEnum,
    IucnEW: 'MX.iucnEW' as RedListStatus2000FinlandEnum,
    IucnRE: 'MX.iucnRE' as RedListStatus2000FinlandEnum,
    IucnCR: 'MX.iucnCR' as RedListStatus2000FinlandEnum,
    IucnEN: 'MX.iucnEN' as RedListStatus2000FinlandEnum,
    IucnVU: 'MX.iucnVU' as RedListStatus2000FinlandEnum,
    IucnNT: 'MX.iucnNT' as RedListStatus2000FinlandEnum,
    IucnLC: 'MX.iucnLC' as RedListStatus2000FinlandEnum,
    IucnDD: 'MX.iucnDD' as RedListStatus2000FinlandEnum,
    IucnNA: 'MX.iucnNA' as RedListStatus2000FinlandEnum,
    IucnNE: 'MX.iucnNE' as RedListStatus2000FinlandEnum
  };
  export type RedListStatus2010FinlandEnum =
    'MX.iucnEX'
    | 'MX.iucnEW'
    | 'MX.iucnRE'
    | 'MX.iucnCR'
    | 'MX.iucnEN'
    | 'MX.iucnVU'
    | 'MX.iucnNT'
    | 'MX.iucnLC'
    | 'MX.iucnDD'
    | 'MX.iucnNA'
    | 'MX.iucnNE';
  export const RedListStatus2010FinlandEnum = {
    IucnEX: 'MX.iucnEX' as RedListStatus2010FinlandEnum,
    IucnEW: 'MX.iucnEW' as RedListStatus2010FinlandEnum,
    IucnRE: 'MX.iucnRE' as RedListStatus2010FinlandEnum,
    IucnCR: 'MX.iucnCR' as RedListStatus2010FinlandEnum,
    IucnEN: 'MX.iucnEN' as RedListStatus2010FinlandEnum,
    IucnVU: 'MX.iucnVU' as RedListStatus2010FinlandEnum,
    IucnNT: 'MX.iucnNT' as RedListStatus2010FinlandEnum,
    IucnLC: 'MX.iucnLC' as RedListStatus2010FinlandEnum,
    IucnDD: 'MX.iucnDD' as RedListStatus2010FinlandEnum,
    IucnNA: 'MX.iucnNA' as RedListStatus2010FinlandEnum,
    IucnNE: 'MX.iucnNE' as RedListStatus2010FinlandEnum
  };
  export type RedListStatus2015FinlandEnum =
    'MX.iucnEX'
    | 'MX.iucnEW'
    | 'MX.iucnRE'
    | 'MX.iucnCR'
    | 'MX.iucnEN'
    | 'MX.iucnVU'
    | 'MX.iucnNT'
    | 'MX.iucnLC'
    | 'MX.iucnDD'
    | 'MX.iucnNA'
    | 'MX.iucnNE';
  export const RedListStatus2015FinlandEnum = {
    IucnEX: 'MX.iucnEX' as RedListStatus2015FinlandEnum,
    IucnEW: 'MX.iucnEW' as RedListStatus2015FinlandEnum,
    IucnRE: 'MX.iucnRE' as RedListStatus2015FinlandEnum,
    IucnCR: 'MX.iucnCR' as RedListStatus2015FinlandEnum,
    IucnEN: 'MX.iucnEN' as RedListStatus2015FinlandEnum,
    IucnVU: 'MX.iucnVU' as RedListStatus2015FinlandEnum,
    IucnNT: 'MX.iucnNT' as RedListStatus2015FinlandEnum,
    IucnLC: 'MX.iucnLC' as RedListStatus2015FinlandEnum,
    IucnDD: 'MX.iucnDD' as RedListStatus2015FinlandEnum,
    IucnNA: 'MX.iucnNA' as RedListStatus2015FinlandEnum,
    IucnNE: 'MX.iucnNE' as RedListStatus2015FinlandEnum
  };
  export type RedListStatus2019FinlandEnum =
    'MX.iucnEX'
    | 'MX.iucnEW'
    | 'MX.iucnRE'
    | 'MX.iucnCR'
    | 'MX.iucnEN'
    | 'MX.iucnVU'
    | 'MX.iucnNT'
    | 'MX.iucnLC'
    | 'MX.iucnDD'
    | 'MX.iucnNA'
    | 'MX.iucnNE';
  export const RedListStatus2019FinlandEnum = {
    IucnEX: 'MX.iucnEX' as RedListStatus2019FinlandEnum,
    IucnEW: 'MX.iucnEW' as RedListStatus2019FinlandEnum,
    IucnRE: 'MX.iucnRE' as RedListStatus2019FinlandEnum,
    IucnCR: 'MX.iucnCR' as RedListStatus2019FinlandEnum,
    IucnEN: 'MX.iucnEN' as RedListStatus2019FinlandEnum,
    IucnVU: 'MX.iucnVU' as RedListStatus2019FinlandEnum,
    IucnNT: 'MX.iucnNT' as RedListStatus2019FinlandEnum,
    IucnLC: 'MX.iucnLC' as RedListStatus2019FinlandEnum,
    IucnDD: 'MX.iucnDD' as RedListStatus2019FinlandEnum,
    IucnNA: 'MX.iucnNA' as RedListStatus2019FinlandEnum,
    IucnNE: 'MX.iucnNE' as RedListStatus2019FinlandEnum
  };
  export type SecureLevelEnum =
    'MX.secureLevelNone'
    | 'MX.secureLevelKM1'
    | 'MX.secureLevelKM5'
    | 'MX.secureLevelKM10'
    | 'MX.secureLevelKM25'
    | 'MX.secureLevelKM50'
    | 'MX.secureLevelKM100'
    | 'MX.secureLevelHighest'
    | 'MX.secureLevelNoShow';
  export const SecureLevelEnum = {
    SecureLevelNone: 'MX.secureLevelNone' as SecureLevelEnum,
    SecureLevelKM1: 'MX.secureLevelKM1' as SecureLevelEnum,
    SecureLevelKM5: 'MX.secureLevelKM5' as SecureLevelEnum,
    SecureLevelKM10: 'MX.secureLevelKM10' as SecureLevelEnum,
    SecureLevelKM25: 'MX.secureLevelKM25' as SecureLevelEnum,
    SecureLevelKM50: 'MX.secureLevelKM50' as SecureLevelEnum,
    SecureLevelKM100: 'MX.secureLevelKM100' as SecureLevelEnum,
    SecureLevelHighest: 'MX.secureLevelHighest' as SecureLevelEnum,
    SecureLevelNoShow: 'MX.secureLevelNoShow' as SecureLevelEnum
  };
  export type TaxonRankEnum =
    'MX.superdomain'
    | 'MX.domain'
    | 'MX.kingdom'
    | 'MX.subkingdom'
    | 'MX.infrakingdom'
    | 'MX.superphylum'
    | 'MX.phylum'
    | 'MX.subphylum'
    | 'MX.infraphylum'
    | 'MX.superdivision'
    | 'MX.division'
    | 'MX.subdivision'
    | 'MX.infradivision'
    | 'MX.superclass'
    | 'MX.class'
    | 'MX.subclass'
    | 'MX.infraclass'
    | 'MX.parvclass'
    | 'MX.superorder'
    | 'MX.order'
    | 'MX.suborder'
    | 'MX.infraorder'
    | 'MX.parvorder'
    | 'MX.superfamily'
    | 'MX.family'
    | 'MX.subfamily'
    | 'MX.tribe'
    | 'MX.subtribe'
    | 'MX.supergenus'
    | 'MX.genus'
    | 'MX.nothogenus'
    | 'MX.subgenus'
    | 'MX.section'
    | 'MX.subsection'
    | 'MX.series'
    | 'MX.subseries'
    | 'MX.infragenericTaxon'
    | 'MX.aggregate'
    | 'MX.species'
    | 'MX.nothospecies'
    | 'MX.infraspecificTaxon'
    | 'MX.subspecificAggregate'
    | 'MX.subspecies'
    | 'MX.nothosubspecies'
    | 'MX.variety'
    | 'MX.subvariety'
    | 'MX.form'
    | 'MX.subform'
    | 'MX.hybrid'
    | 'MX.anamorph'
    | 'MX.ecotype'
    | 'MX.populationGroup'
    | 'MX.intergenericHybrid'
    | 'MX.infragenericHybrid'
    | 'MX.cultivar'
    | 'MX.group'
    | 'MX.speciesAggregate';
  export const TaxonRankEnum = {
    Superdomain: 'MX.superdomain' as TaxonRankEnum,
    Domain: 'MX.domain' as TaxonRankEnum,
    Kingdom: 'MX.kingdom' as TaxonRankEnum,
    Subkingdom: 'MX.subkingdom' as TaxonRankEnum,
    Infrakingdom: 'MX.infrakingdom' as TaxonRankEnum,
    Infrakingdom_2: 'MX.infrakingdom' as TaxonRankEnum,
    Superphylum: 'MX.superphylum' as TaxonRankEnum,
    Phylum: 'MX.phylum' as TaxonRankEnum,
    Subphylum: 'MX.subphylum' as TaxonRankEnum,
    Infraphylum: 'MX.infraphylum' as TaxonRankEnum,
    Superdivision: 'MX.superdivision' as TaxonRankEnum,
    Division: 'MX.division' as TaxonRankEnum,
    Subdivision: 'MX.subdivision' as TaxonRankEnum,
    Infradivision: 'MX.infradivision' as TaxonRankEnum,
    Superclass: 'MX.superclass' as TaxonRankEnum,
    Class: 'MX.class' as TaxonRankEnum,
    Subclass: 'MX.subclass' as TaxonRankEnum,
    Infraclass: 'MX.infraclass' as TaxonRankEnum,
    Parvclass: 'MX.parvclass' as TaxonRankEnum,
    Superorder: 'MX.superorder' as TaxonRankEnum,
    Order: 'MX.order' as TaxonRankEnum,
    Suborder: 'MX.suborder' as TaxonRankEnum,
    Infraorder: 'MX.infraorder' as TaxonRankEnum,
    Parvorder: 'MX.parvorder' as TaxonRankEnum,
    Superfamily: 'MX.superfamily' as TaxonRankEnum,
    Family: 'MX.family' as TaxonRankEnum,
    Subfamily: 'MX.subfamily' as TaxonRankEnum,
    Tribe: 'MX.tribe' as TaxonRankEnum,
    Subtribe: 'MX.subtribe' as TaxonRankEnum,
    Supergenus: 'MX.supergenus' as TaxonRankEnum,
    Genus: 'MX.genus' as TaxonRankEnum,
    Nothogenus: 'MX.nothogenus' as TaxonRankEnum,
    Subgenus: 'MX.subgenus' as TaxonRankEnum,
    Section: 'MX.section' as TaxonRankEnum,
    Subsection: 'MX.subsection' as TaxonRankEnum,
    Series: 'MX.series' as TaxonRankEnum,
    Subseries: 'MX.subseries' as TaxonRankEnum,
    InfragenericTaxon: 'MX.infragenericTaxon' as TaxonRankEnum,
    Aggregate: 'MX.aggregate' as TaxonRankEnum,
    Species: 'MX.species' as TaxonRankEnum,
    Nothospecies: 'MX.nothospecies' as TaxonRankEnum,
    InfraspecificTaxon: 'MX.infraspecificTaxon' as TaxonRankEnum,
    SubspecificAggregate: 'MX.subspecificAggregate' as TaxonRankEnum,
    Subspecies: 'MX.subspecies' as TaxonRankEnum,
    Nothosubspecies: 'MX.nothosubspecies' as TaxonRankEnum,
    Variety: 'MX.variety' as TaxonRankEnum,
    Subvariety: 'MX.subvariety' as TaxonRankEnum,
    Form: 'MX.form' as TaxonRankEnum,
    Subform: 'MX.subform' as TaxonRankEnum,
    Hybrid: 'MX.hybrid' as TaxonRankEnum,
    Anamorph: 'MX.anamorph' as TaxonRankEnum,
    Ecotype: 'MX.ecotype' as TaxonRankEnum,
    PopulationGroup: 'MX.populationGroup' as TaxonRankEnum,
    IntergenericHybrid: 'MX.intergenericHybrid' as TaxonRankEnum,
    InfragenericHybrid: 'MX.infragenericHybrid' as TaxonRankEnum,
    Cultivar: 'MX.cultivar' as TaxonRankEnum,
    Group: 'MX.group' as TaxonRankEnum,
    SpeciesAggregate: 'MX.speciesAggregate' as TaxonRankEnum
  };
  export type WinteringSecureLevelEnum =
    'MX.secureLevelNone'
    | 'MX.secureLevelKM1'
    | 'MX.secureLevelKM5'
    | 'MX.secureLevelKM10'
    | 'MX.secureLevelKM25'
    | 'MX.secureLevelKM50'
    | 'MX.secureLevelKM100'
    | 'MX.secureLevelHighest'
    | 'MX.secureLevelNoShow';
  export const WinteringSecureLevelEnum = {
    SecureLevelNone: 'MX.secureLevelNone' as WinteringSecureLevelEnum,
    SecureLevelKM1: 'MX.secureLevelKM1' as WinteringSecureLevelEnum,
    SecureLevelKM5: 'MX.secureLevelKM5' as WinteringSecureLevelEnum,
    SecureLevelKM10: 'MX.secureLevelKM10' as WinteringSecureLevelEnum,
    SecureLevelKM25: 'MX.secureLevelKM25' as WinteringSecureLevelEnum,
    SecureLevelKM50: 'MX.secureLevelKM50' as WinteringSecureLevelEnum,
    SecureLevelKM100: 'MX.secureLevelKM100' as WinteringSecureLevelEnum,
    SecureLevelHighest: 'MX.secureLevelHighest' as WinteringSecureLevelEnum,
    SecureLevelNoShow: 'MX.secureLevelNoShow' as WinteringSecureLevelEnum
  };
}
