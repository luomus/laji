/* tslint:disable:max-line-length */  /**
 * API documentation
 * Access token is needed to use this API. To get a token, send a POST request with your email address to /api-users endpoint and one will be send to your. Each endpoint bellow has more information on how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.  You can find more documentation [here](https://laji.fi/about/806).  ##Endpoints  Observations and collections * Warehouse - Observation Data Warehouse API * Collection - Collection metadata * Source - Information sources (IT systems) * Annotation - Quality control   Taxonomy * Taxa - Taxonomy API * InformalTaxonGroup - Informal taxon groups are used in taxa and warehouse endpoints * Publication - Scientific publications * Checklist - Mainly you only work with one checklits: the FinBIF master checklist. There are others.   Other master data * Metadata - Variable descriptions * Area - Countries, municipalities and biogeographical provinces of Finland, etc. * Person - Information about people.   Helpers * APIUser - Register as an API user * Autocomplete - For making an autocomplete filed for taxa, collections or persons (friends) * PersonToken - Information about an authorized person   Vihko observation system * Form - Form definition * Document - Document instance of a form * Image - Image of a document   Laji.fi portal * Feedback - Feedback form API * Information - CMS content of information pages * Logger - Error logging from user's browsers to FinBIF * News - News
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { GatheringFact } from './gatheringFact';
import { TaxonCensus } from './taxonCensus';
import { Unit } from './unit';


export interface Gathering {
  /**
   * Context for the given json
   */
  context?: string;

  /**
   * AFE grid name
   */
  aFEQuadrat?: string;
  /**
   * UTM grid name
   */
  uTMQuadrat?: string;
  /**
   * Regions, rayons, provinces and other administrative areas. Separate multiple names with commas, from generic to specific. (E.g. Etelä-Suomen lääni, Uusimaa)
   */
  administrativeProvince?: string;
  /**
   * Altitude form sea level in meters, single value or range (E.g. 90, or 80-100). No GPS altitude here.
   */
  alt?: string;
  areaDetail?: string;
  /**
   * Write associated observation taxa names here, separated by a semicolon (;). E.g.: \\\"Betula pendula; Betula pubescens; Poaceae\\\". These will form their own units of the type observation.
   */
  associatedObservationTaxa?: string;
  /**
   * Write associated specimen taxa names here, separated by a semicolon (;). E.g.: \\\"Betula pendula; Betula pubescens; Poaceae\\\". These will form their own units of the type Preserved specimen.
   */
  associatedSpecimenTaxa?: string;
  /**
   * Bat habitat
   */
  batHabitat?: Array<string>;
  /**
   * Formal abbreviation. For Finnish eliömaakunnat, use Finnish abbreviation.
   */
  biologicalProvince?: string;
  /**
   * Name of an expedition or such.
   */
  collectingEventName?: string;
  controlActivitiesNotes?: string;
  /**
   * Free-text notes about the coordinates.
   */
  coordinateNotes?: string;
  /**
   * Maximum error of coordinates in meters
   */
  coordinateRadius?: string;
  /**
   * Use for NEW SPECIMENS: Where the coordinates have been acquired
   */
  coordinateSource?: Gathering.CoordinateSourceEnum;
  /**
   * More information about the coordinate systems: https://wiki.helsinki.fi/display/digit/Entering+specimen+data
   */
  coordinateSystem?: Gathering.CoordinateSystemEnum;
  coordinatesGridYKJ?: string;
  /**
   * Coordinates, possible coordinate system and error radius word-to-word as they appear on the label or other original source, errors and all.
   */
  coordinatesVerbatim?: string;
  /**
   * Country name in English, or 2-letter country code, or name from label
   */
  country?: string;
  /**
   * County (piirikunta, kreivikunta etc.)
   */
  county?: string;
  dateBegin?: string;
  dateEnd?: string;
  /**
   * Date just as it appears on the label or other original source, no interpretation, errors and all
   */
  dateVerbatim?: string;
  /**
   * Depth in meters, single value or range (E.g. 0.9, or 0.8-1.0)
   */
  depth?: string;
  dynamicProperties?: string;
  eventDate?: string;
  /**
   * Finnish forest vegetation zone
   */
  forestVegetationZone?: Gathering.ForestVegetationZoneEnum;
  /**
   * instance of gatheringFact
   */
  gatheringFact?: GatheringFact;
  gatheringType?: Gathering.GatheringTypeEnum;
  /**
   * QName for MZ.geometry
   */
  geometry?: string;
  /**
   * Use for OLD SPECIMENS: What source was used to get coordinates based on locality names
   */
  georeferenceSource?: Gathering.GeoreferenceSourceEnum;
  habitat?: Array<string>;
  habitatAttributes?: Array<string>;
  /**
   * Formal habitat name or abbreviation. If several, separate with semicolons (E.g. 'OMT; OMaT').
   */
  habitatClassification?: string;
  /**
   * Informal description of the habitat.
   */
  habitatDescription?: string;
  /**
   * QName for MY.unit
   */
  hasUnit?: Array<string>;
  /**
   * If country is not known or not applicable, for example continent, ocean or large island
   */
  higherGeography?: string;
  /**
   * Unique ID for the object. This will be automatically generated.
   */
  id?: string;
  /**
   * QName for MM.image
   */
  images?: Array<string>;
  invasiveControlAreaKnown?: boolean;
  invasiveControlDangerous?: boolean;
  invasiveControlDangerousDescription?: string;
  invasiveControlEffectiveness?: Gathering.InvasiveControlEffectivenessEnum;
  invasiveControlEffectivenessNotes?: string;
  invasiveControlMethods?: Array<string>;
  invasiveControlMethodsDescription?: string;
  invasiveControlOpen?: boolean;
  invasiveControlOpenDescription?: string;
  /**
   * Non-negative integer
   */
  invasiveControlOtherExpensesInEuros?: number;
  /**
   * QName for MX.taxon
   */
  invasiveControlTaxon?: Array<string>;
  keywords?: Array<string>;
  /**
   * Latitude. For southern latitudes, use negative value.
   */
  latitude?: string;
  /**
   * Name of the collector(s), in format 'Lastname, Firstname; Lastname Firstname'
   */
  leg?: Array<string>;
  /**
   * Alkuperäislähteen käyttäjätunnus
   */
  legUserID?: Array<string>;
  /**
   * Leg just as it appears in the label or other original source, no interpretation, errors and all.
   */
  legVerbatim?: string;
  /**
   * Official name of the locality in basic form. Separate multiple names with commas, from generic to specific. No informal description here.
   */
  locality?: string;
  /**
   * Informal description of the exact locality, e.g. '5 km NE of city X, under stone bridge'
   */
  localityDescription?: string;
  /**
   * An unique identifier or code for the locality, if the locality has one (e.g. from SAPO-ontology).
   */
  localityID?: string;
  /**
   * Locality word-to-word as it appears on the label or other original source, errors and all
   */
  localityVerbatim?: string;
  /**
   * Longitude. For western longitudes, use negative value.
   */
  longitude?: string;
  /**
   * Municipality, commune, town, city or civil parish
   */
  municipality?: string;
  /**
   * QName for MNP.namedPlace
   */
  namedPlaceID?: string;
  /**
   * Additional information to the data in each section.
   */
  notes?: string;
  observationDays?: number;
  observationMinutes?: number;
  predominantTree?: Gathering.PredominantTreeEnum;
  projectTitle?: string;
  province?: string;
  /**
   * PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
   */
  publicityRestrictions?: Gathering.PublicityRestrictionsEnum;
  /**
   * Relative humidity %. Non-negative integer
   */
  relativeHumidity?: number;
  /**
   * Main method for (usually intentional) sampling
   */
  samplingMethod?: Gathering.SamplingMethodEnum;
  samplingMethodNotes?: string;
  skipped?: boolean;
  /**
   * Type of substrate or name of substrate species.
   */
  substrate?: string;
  /**
   * Array of taxonCensus
   */
  taxonCensus?: Array<TaxonCensus>;
  temperature?: number;
  timeEnd?: string;
  timeStart?: string;
  trapCount?: number;
  /**
   * QName for MY.unit
   */
  unit?: Array<string>;
  /**
   * Array of units
   */
  units?: Array<Unit>;
  weather?: string;
  /**
   * Geological information about gathering in wgs84 format
   */
  wgs84Geometry?: any;
  wgs84Latitude?: string;
  wgs84Longitude?: string;
}

export namespace Gathering {
  export type CoordinateSourceEnum =
    'MY.coordinateSourceGps'
    | 'MY.coordinateSourcePeruskartta'
    | 'MY.coordinateSourcePapermap'
    | 'MY.coordinateSourceKotkamap'
    | 'MY.coordinateSourceKarttapaikka'
    | 'MY.coordinateSourceRetkikartta'
    | 'MY.coordinateSourceGoogle'
    | 'MY.coordinateSourceOther'
    | 'MY.coordinateSourceUnknown';
  export const CoordinateSourceEnum = {
    CoordinateSourceGps: 'MY.coordinateSourceGps' as CoordinateSourceEnum,
    CoordinateSourcePeruskartta: 'MY.coordinateSourcePeruskartta' as CoordinateSourceEnum,
    CoordinateSourcePapermap: 'MY.coordinateSourcePapermap' as CoordinateSourceEnum,
    CoordinateSourceKotkamap: 'MY.coordinateSourceKotkamap' as CoordinateSourceEnum,
    CoordinateSourceKarttapaikka: 'MY.coordinateSourceKarttapaikka' as CoordinateSourceEnum,
    CoordinateSourceRetkikartta: 'MY.coordinateSourceRetkikartta' as CoordinateSourceEnum,
    CoordinateSourceGoogle: 'MY.coordinateSourceGoogle' as CoordinateSourceEnum,
    CoordinateSourceOther: 'MY.coordinateSourceOther' as CoordinateSourceEnum,
    CoordinateSourceUnknown: 'MY.coordinateSourceUnknown' as CoordinateSourceEnum
  };
  export type CoordinateSystemEnum =
    'MY.coordinateSystemYkj'
    | 'MY.coordinateSystemWgs84'
    | 'MY.coordinateSystemWgs84dms'
    | 'MY.coordinateSystemKkj'
    | 'MY.coordinateSystemEtrs-tm35fin'
    | 'MY.coordinateSystemDd'
    | 'MY.coordinateSystemDms';
  export const CoordinateSystemEnum = {
    CoordinateSystemYkj: 'MY.coordinateSystemYkj' as CoordinateSystemEnum,
    CoordinateSystemWgs84: 'MY.coordinateSystemWgs84' as CoordinateSystemEnum,
    CoordinateSystemWgs84dms: 'MY.coordinateSystemWgs84dms' as CoordinateSystemEnum,
    CoordinateSystemKkj: 'MY.coordinateSystemKkj' as CoordinateSystemEnum,
    CoordinateSystemEtrsTm35fin: 'MY.coordinateSystemEtrs-tm35fin' as CoordinateSystemEnum,
    CoordinateSystemDd: 'MY.coordinateSystemDd' as CoordinateSystemEnum,
    CoordinateSystemDms: 'MY.coordinateSystemDms' as CoordinateSystemEnum
  };
  export type ForestVegetationZoneEnum =
    'MY.forestVegetationZone1a'
    | 'MY.forestVegetationZone1b'
    | 'MY.forestVegetationZone2a'
    | 'MY.forestVegetationZone2b'
    | 'MY.forestVegetationZone3a'
    | 'MY.forestVegetationZone3b'
    | 'MY.forestVegetationZone3c'
    | 'MY.forestVegetationZone4a'
    | 'MY.forestVegetationZone4b'
    | 'MY.forestVegetationZone4c'
    | 'MY.forestVegetationZone4d';
  export const ForestVegetationZoneEnum = {
    ForestVegetationZone1a: 'MY.forestVegetationZone1a' as ForestVegetationZoneEnum,
    ForestVegetationZone1b: 'MY.forestVegetationZone1b' as ForestVegetationZoneEnum,
    ForestVegetationZone2a: 'MY.forestVegetationZone2a' as ForestVegetationZoneEnum,
    ForestVegetationZone2b: 'MY.forestVegetationZone2b' as ForestVegetationZoneEnum,
    ForestVegetationZone3a: 'MY.forestVegetationZone3a' as ForestVegetationZoneEnum,
    ForestVegetationZone3b: 'MY.forestVegetationZone3b' as ForestVegetationZoneEnum,
    ForestVegetationZone3c: 'MY.forestVegetationZone3c' as ForestVegetationZoneEnum,
    ForestVegetationZone4a: 'MY.forestVegetationZone4a' as ForestVegetationZoneEnum,
    ForestVegetationZone4b: 'MY.forestVegetationZone4b' as ForestVegetationZoneEnum,
    ForestVegetationZone4c: 'MY.forestVegetationZone4c' as ForestVegetationZoneEnum,
    ForestVegetationZone4d: 'MY.forestVegetationZone4d' as ForestVegetationZoneEnum
  };
  export type GatheringTypeEnum =
    'MY.gatheringTypeForagingArea'
    | 'MY.gatheringTypeBreedingAndRestingArea'
    | 'MY.gatheringTypeCavityTree'
    | 'MY.gatheringTypeDroppingsTree'
    | 'MY.gatheringTypeNestTree';
  export const GatheringTypeEnum = {
    GatheringTypeForagingArea: 'MY.gatheringTypeForagingArea' as GatheringTypeEnum,
    GatheringTypeBreedingAndRestingArea: 'MY.gatheringTypeBreedingAndRestingArea' as GatheringTypeEnum,
    GatheringTypeCavityTree: 'MY.gatheringTypeCavityTree' as GatheringTypeEnum,
    GatheringTypeDroppingsTree: 'MY.gatheringTypeDroppingsTree' as GatheringTypeEnum,
    GatheringTypeNestTree: 'MY.gatheringTypeNestTree' as GatheringTypeEnum
  };
  export type GeoreferenceSourceEnum =
    'MY.georeferenceSourceKotka'
    | 'MY.georeferenceSourceKarttapaikka'
    | 'MY.georeferenceSourcePaikkatietoikkuna'
    | 'MY.georeferenceSourceKarjalankartat'
    | 'MY.georeferenceSourceRetkikartta'
    | 'MY.georeferenceSourceGoogle'
    | 'MY.georeferenceSourcePeruskartta'
    | 'MY.georeferenceSourcePapermap'
    | 'MY.georeferenceSourceOtherpaper'
    | 'MY.georeferenceSourceOtherweb'
    | 'MY.georeferenceSourceCatalogue'
    | 'MY.georeferenceSourceBiogeomancer'
    | 'MY.georeferenceSourceGeolocate'
    | 'MY.georeferenceSourceOther'
    | 'MY.georeferenceSourceUnknown';
  export const GeoreferenceSourceEnum = {
    GeoreferenceSourceKotka: 'MY.georeferenceSourceKotka' as GeoreferenceSourceEnum,
    GeoreferenceSourceKarttapaikka: 'MY.georeferenceSourceKarttapaikka' as GeoreferenceSourceEnum,
    GeoreferenceSourcePaikkatietoikkuna: 'MY.georeferenceSourcePaikkatietoikkuna' as GeoreferenceSourceEnum,
    GeoreferenceSourceKarjalankartat: 'MY.georeferenceSourceKarjalankartat' as GeoreferenceSourceEnum,
    GeoreferenceSourceRetkikartta: 'MY.georeferenceSourceRetkikartta' as GeoreferenceSourceEnum,
    GeoreferenceSourceGoogle: 'MY.georeferenceSourceGoogle' as GeoreferenceSourceEnum,
    GeoreferenceSourcePeruskartta: 'MY.georeferenceSourcePeruskartta' as GeoreferenceSourceEnum,
    GeoreferenceSourcePapermap: 'MY.georeferenceSourcePapermap' as GeoreferenceSourceEnum,
    GeoreferenceSourceOtherpaper: 'MY.georeferenceSourceOtherpaper' as GeoreferenceSourceEnum,
    GeoreferenceSourceOtherweb: 'MY.georeferenceSourceOtherweb' as GeoreferenceSourceEnum,
    GeoreferenceSourceCatalogue: 'MY.georeferenceSourceCatalogue' as GeoreferenceSourceEnum,
    GeoreferenceSourceBiogeomancer: 'MY.georeferenceSourceBiogeomancer' as GeoreferenceSourceEnum,
    GeoreferenceSourceGeolocate: 'MY.georeferenceSourceGeolocate' as GeoreferenceSourceEnum,
    GeoreferenceSourceOther: 'MY.georeferenceSourceOther' as GeoreferenceSourceEnum,
    GeoreferenceSourceUnknown: 'MY.georeferenceSourceUnknown' as GeoreferenceSourceEnum
  };
  export type InvasiveControlEffectivenessEnum =
    'MY.invasiveControlEffectivenessFull'
    | 'MY.invasiveControlEffectivenessPartial'
    | 'MY.invasiveControlEffectivenessNone'
    | 'MY.invasiveControlEffectivenessNotFound';
  export const InvasiveControlEffectivenessEnum = {
    InvasiveControlEffectivenessFull: 'MY.invasiveControlEffectivenessFull' as InvasiveControlEffectivenessEnum,
    InvasiveControlEffectivenessPartial: 'MY.invasiveControlEffectivenessPartial' as InvasiveControlEffectivenessEnum,
    InvasiveControlEffectivenessNone: 'MY.invasiveControlEffectivenessNone' as InvasiveControlEffectivenessEnum,
    InvasiveControlEffectivenessNotFound: 'MY.invasiveControlEffectivenessNotFound' as InvasiveControlEffectivenessEnum
  };
  export type PredominantTreeEnum =
    'MX.37819'
    | 'MX.37812'
    | 'MX.37992'
    | 'MX.38004'
    | 'MX.38590'
    | 'MX.38686'
    | 'MX.38563'
    | 'MX.38527'
    | 'MX.41344'
    | 'MX.38016'
    | 'MX.39331'
    | 'MX.37990'
    | 'MX.38008'
    | 'MX.38010'
    | 'MX.37975'
    | 'MX.37976'
    | 'MX.39122';
  export const PredominantTreeEnum = {
    MX37819: 'MX.37819' as PredominantTreeEnum,
    MX37812: 'MX.37812' as PredominantTreeEnum,
    MX37992: 'MX.37992' as PredominantTreeEnum,
    MX38004: 'MX.38004' as PredominantTreeEnum,
    MX38590: 'MX.38590' as PredominantTreeEnum,
    MX38686: 'MX.38686' as PredominantTreeEnum,
    MX38563: 'MX.38563' as PredominantTreeEnum,
    MX38527: 'MX.38527' as PredominantTreeEnum,
    MX41344: 'MX.41344' as PredominantTreeEnum,
    MX38016: 'MX.38016' as PredominantTreeEnum,
    MX39331: 'MX.39331' as PredominantTreeEnum,
    MX37990: 'MX.37990' as PredominantTreeEnum,
    MX38008: 'MX.38008' as PredominantTreeEnum,
    MX38010: 'MX.38010' as PredominantTreeEnum,
    MX37975: 'MX.37975' as PredominantTreeEnum,
    MX37976: 'MX.37976' as PredominantTreeEnum,
    MX39122: 'MX.39122' as PredominantTreeEnum
  };
  export type PublicityRestrictionsEnum =
    'MZ.publicityRestrictionsPublic'
    | 'MZ.publicityRestrictionsProtected'
    | 'MZ.publicityRestrictionsPrivate';
  export const PublicityRestrictionsEnum = {
    PublicityRestrictionsPublic: 'MZ.publicityRestrictionsPublic' as PublicityRestrictionsEnum,
    PublicityRestrictionsProtected: 'MZ.publicityRestrictionsProtected' as PublicityRestrictionsEnum,
    PublicityRestrictionsPrivate: 'MZ.publicityRestrictionsPrivate' as PublicityRestrictionsEnum
  };
  export type SamplingMethodEnum =
    'MY.samplingMethodLight'
    | 'MY.samplingMethodLightTrap'
    | 'MY.samplingMethodTrap'
    | 'MY.samplingMethodMalaise'
    | 'MY.samplingMethodPitfall'
    | 'MY.samplingMethodWindowtrap'
    | 'MY.samplingMethodYellowWindowTrap'
    | 'MY.samplingMethodPantrap'
    | 'MY.samplingMethodYellowpan'
    | 'MY.samplingMethodYellowtrap'
    | 'MY.samplingMethodFeromonetrap'
    | 'MY.samplingMethodBaittrap'
    | 'MY.samplingMethodBait'
    | 'MY.samplingMethodNet'
    | 'MY.samplingMethodSweeping'
    | 'MY.samplingMethodCarnet'
    | 'MY.samplingMethodMistnet'
    | 'MY.samplingMethodBoard'
    | 'MY.samplingMethodReared'
    | 'MY.samplingMethodExovo'
    | 'MY.samplingMethodElarva'
    | 'MY.samplingMethodEpupa'
    | 'MY.samplingMethodEclectortrap'
    | 'MY.samplingMethodHand'
    | 'MY.samplingMethodSifting'
    | 'MY.samplingMethodSoilsample'
    | 'MY.samplingMethodDropping'
    | 'MY.samplingMethodWashing'
    | 'MY.samplingMethodDigging'
    | 'MY.samplingMethodDiving'
    | 'MY.samplingMethodDrag'
    | 'MY.samplingMethodTriangleDrag'
    | 'MY.samplingMethodFishNet'
    | 'MY.samplingMethodElectrofishing'
    | 'MY.samplingMethodAngleFishing'
    | 'MY.samplingMethodFishTrap'
    | 'MY.samplingMethodSeine'
    | 'MY.samplingMethodTrawling'
    | 'MY.samplingMethodBeamTrawl'
    | 'MY.samplingMethodOther';
  export const SamplingMethodEnum = {
    SamplingMethodLight: 'MY.samplingMethodLight' as SamplingMethodEnum,
    SamplingMethodLightTrap: 'MY.samplingMethodLightTrap' as SamplingMethodEnum,
    SamplingMethodTrap: 'MY.samplingMethodTrap' as SamplingMethodEnum,
    SamplingMethodMalaise: 'MY.samplingMethodMalaise' as SamplingMethodEnum,
    SamplingMethodPitfall: 'MY.samplingMethodPitfall' as SamplingMethodEnum,
    SamplingMethodWindowtrap: 'MY.samplingMethodWindowtrap' as SamplingMethodEnum,
    SamplingMethodYellowWindowTrap: 'MY.samplingMethodYellowWindowTrap' as SamplingMethodEnum,
    SamplingMethodPantrap: 'MY.samplingMethodPantrap' as SamplingMethodEnum,
    SamplingMethodYellowpan: 'MY.samplingMethodYellowpan' as SamplingMethodEnum,
    SamplingMethodYellowtrap: 'MY.samplingMethodYellowtrap' as SamplingMethodEnum,
    SamplingMethodFeromonetrap: 'MY.samplingMethodFeromonetrap' as SamplingMethodEnum,
    SamplingMethodBaittrap: 'MY.samplingMethodBaittrap' as SamplingMethodEnum,
    SamplingMethodBait: 'MY.samplingMethodBait' as SamplingMethodEnum,
    SamplingMethodNet: 'MY.samplingMethodNet' as SamplingMethodEnum,
    SamplingMethodSweeping: 'MY.samplingMethodSweeping' as SamplingMethodEnum,
    SamplingMethodCarnet: 'MY.samplingMethodCarnet' as SamplingMethodEnum,
    SamplingMethodMistnet: 'MY.samplingMethodMistnet' as SamplingMethodEnum,
    SamplingMethodBoard: 'MY.samplingMethodBoard' as SamplingMethodEnum,
    SamplingMethodReared: 'MY.samplingMethodReared' as SamplingMethodEnum,
    SamplingMethodExovo: 'MY.samplingMethodExovo' as SamplingMethodEnum,
    SamplingMethodElarva: 'MY.samplingMethodElarva' as SamplingMethodEnum,
    SamplingMethodEpupa: 'MY.samplingMethodEpupa' as SamplingMethodEnum,
    SamplingMethodEclectortrap: 'MY.samplingMethodEclectortrap' as SamplingMethodEnum,
    SamplingMethodHand: 'MY.samplingMethodHand' as SamplingMethodEnum,
    SamplingMethodSifting: 'MY.samplingMethodSifting' as SamplingMethodEnum,
    SamplingMethodSoilsample: 'MY.samplingMethodSoilsample' as SamplingMethodEnum,
    SamplingMethodDropping: 'MY.samplingMethodDropping' as SamplingMethodEnum,
    SamplingMethodWashing: 'MY.samplingMethodWashing' as SamplingMethodEnum,
    SamplingMethodDigging: 'MY.samplingMethodDigging' as SamplingMethodEnum,
    SamplingMethodDiving: 'MY.samplingMethodDiving' as SamplingMethodEnum,
    SamplingMethodDrag: 'MY.samplingMethodDrag' as SamplingMethodEnum,
    SamplingMethodTriangleDrag: 'MY.samplingMethodTriangleDrag' as SamplingMethodEnum,
    SamplingMethodFishNet: 'MY.samplingMethodFishNet' as SamplingMethodEnum,
    SamplingMethodElectrofishing: 'MY.samplingMethodElectrofishing' as SamplingMethodEnum,
    SamplingMethodAngleFishing: 'MY.samplingMethodAngleFishing' as SamplingMethodEnum,
    SamplingMethodFishTrap: 'MY.samplingMethodFishTrap' as SamplingMethodEnum,
    SamplingMethodSeine: 'MY.samplingMethodSeine' as SamplingMethodEnum,
    SamplingMethodTrawling: 'MY.samplingMethodTrawling' as SamplingMethodEnum,
    SamplingMethodBeamTrawl: 'MY.samplingMethodBeamTrawl' as SamplingMethodEnum,
    SamplingMethodOther: 'MY.samplingMethodOther' as SamplingMethodEnum
  };
}
