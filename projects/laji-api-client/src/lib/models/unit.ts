/* eslint-disable max-len */  /**
 * API documentation
 * Access token is needed to use this API. To get a token, send a POST request with your email address to /api-users endpoint and one will be send to your. Each endpoint bellow has more information on how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.  You can find more documentation [here](https://laji.fi/about/806).  ##Endpoints  Observations and collections * Warehouse - Observation Data Warehouse API * Collection - Collection metadata * Source - Information sources (IT systems) * Annotation - Quality control   Taxonomy * Taxa - Taxonomy API * InformalTaxonGroup - Informal taxon groups are used in taxa and warehouse endpoints * Publication - Scientific publications * Checklist - Mainly you only work with one checklits: the FinBIF master checklist. There are others.   Other master data * Metadata - Variable descriptions * Area - Countries, municipalities and biogeographical provinces of Finland, etc. * Person - Information about people.   Helpers * APIUser - Register as an API user * Autocomplete - For making an autocomplete filed for taxa, collections or persons (friends) * PersonToken - Information about an authorized person   Vihko observation system * Form - Form definition * Document - Document instance of a form * Image - Image of a document   Laji.fi portal * Feedback - Feedback form API * Information - CMS content of information pages * Logger - Error logging from user's browsers to FinBIF * News - News
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */
import { Identifications } from './identifications';
import { Measurement } from './measurement';
import { TypeSpecimen } from './typeSpecimen';
import { UnitFact } from './unitFact';
import { UnitGathering } from './unitGathering';


export interface Unit {
  /**
   * Context for the given json
   */
  context?: string;

  /**
   * Diameter at breast height, in centimeters
   */
  DBH?: string;
  /**
   * Leave empty if no sample taken, or if the sample is recorded separately
   */
  dNASampleLocation?: string;
  abundanceString?: string;
  /**
   * Other identifiers this specimen has, in format 'type:identifier'. For example: 'mzhtypes:123' (old MAZ-type number)
   */
  additionalIDs?: Array<string>;
  adultIndividualCount?: number;
  /**
   * Estimated or known age in calendar years, years, days or other relevant unit.
   */
  age?: string;
  /**
   * E.g. how age was determined, by whom and when.
   */
  ageNotes?: string;
  alive?: boolean;
  ankleInMillimeters?: Array<string>;
  /**
   * Non-negative integer
   */
  areaInSquareMeters?: number;
  atlasCode?: Unit.AtlasCodeEnum;
  batBehavior?: Unit.BatBehaviorEnum;
  beakInMillimeters?: Array<string>;
  birdAge?: Unit.BirdAgeEnum;
  birdBehavior?: Array<string>;
  birdPlumage?: Unit.BirdPlumageEnum;
  breeding?: boolean;
  broodSize?: number;
  /**
   * Cause of death, if not intentionally trapped on sampled
   */
  causeOfDeath?: string;
  /**
   * QName for MR.checklist
   */
  checklistID?: string;
  /**
   * Results of chemical reaction tests etc.
   */
  chemistry?: string;
  /**
   * Numeric or other description on the amount of individuals (or sprouts, fruiting bodies or such) in the specimen. Sexes and juveniles can be specified like so: 1m2f3j (=1 male, 2 females, 3 juveniles)
   */
  count?: string;
  /**
   * Estimation of decay stage (lahoaste in Finnish) on the scale of 1 to 5 and/or description
   */
  decayStage?: string;
  distance?: Unit.DistanceEnum;
  /**
   * For palaeontological specimens, earliest possible geochronologic epoch or lowest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected
   */
  earliestEpochOrLowestSeries?: Unit.EarliestEpochOrLowestSeriesEnum;
  /**
   * Non-negative integer
   */
  femaleIndividualCount?: number;
  /**
   * Genotype of the microbial strain
   */
  genotype?: string;
  gonadInMillimeters?: Array<string>;
  /**
   * Microbial culture growth medium name, usually from a standard
   */
  growthMediumName?: string;
  /**
   * Other growth conditions for the microbial culture, light etc.
   */
  growthOtherConditions?: string;
  /**
   * Microbial culture growth temperature
   */
  growthTemperature?: string;
  /**
   * QName for MY.identification
   */
  hasIdentification?: Array<string>;
  /**
   * QName for MY.subUnit
   */
  hasSubUnit?: Array<string>;
  /**
   * QName for MX.taxon
   */
  hostID?: string;
  hostInformalNameString?: string;
  /**
   * Unique ID for the object. This will be automatically generated.
   */
  id?: string;
  /**
   * QName for MY.identification
   */
  identification?: Array<string>;
  /**
   * Array of identifications
   */
  identifications?: Array<Identifications>;
  /**
   * QName for MM.image
   */
  images?: Array<string>;
  /**
   * Non-negative integer
   */
  individualCount?: number;
  informalNameString?: string;
  /**
   * QName for MVL.informalTaxonGroup
   */
  informalTaxonGroup?: string;
  /**
   * Valitut muotoryhm√§t. QName for MVL.informalTaxonGroup
   */
  informalTaxonGroups?: Array<string>;
  /**
   * Pathovars, serovars and other infrasubspecific subdivisions of microbes.
   */
  infrasubspecificSubdivision?: string;
  juvenileIndividualCount?: number;
  keywords?: Array<string>;
  /**
   * For palaeontological specimens, latest possible geochronologic epoch or highest chronostratigraphic series attributable to the stratigraphic horizon from which the specimen was collected.
   */
  latestEpochOrHighestSeries?: Unit.LatestEpochOrHighestSeriesEnum;
  lengthInMillimeters?: Array<string>;
  /**
   * Life stage of the specimen
   */
  lifeStage?: Unit.LifeStageEnum;
  /**
   * Free-text notes or addtional information about the life stage
   */
  lifeStageDescription?: string;
  likelyMigrant?: boolean;
  /**
   * Macroscopic features and measurements, if not recorded separately into measurement fields.
   */
  macroscopy?: string;
  /**
   * Non-negative integer
   */
  maleIndividualCount?: number;
  /**
   * instance of measurement
   */
  measurement?: Measurement;
  /**
   * According to German TRBA August 2015, which is more comprehensive than the EU or Finnish list for bacterial risk groups
   */
  microbiologicalRiskGroup?: Unit.MicrobiologicalRiskGroupEnum;
  /**
   * Microscopic features and measurements, if not recorded separately into measurement fields.
   */
  microscopy?: string;
  movingDirection?: Unit.MovingDirectionEnum;
  movingStatus?: Array<string>;
  /**
   * Information on mutant microbial strain.
   */
  mutant?: string;
  nativeStatus?: Unit.NativeStatusEnum;
  /**
   * Additional information to the data in each section.
   */
  notes?: string;
  pairCount?: number;
  plantLifeStage?: Unit.PlantLifeStageEnum;
  plantStatusCode?: Unit.PlantStatusCodeEnum;
  /**
   * Abundance of the taxon in the field
   */
  populationAbundance?: string;
  /**
   * Preparations/preparates made from the specimen, if not recorded as separate Preparations/samples in the designated section
   */
  preparations?: string;
  /**
   * Main method of preservation. If parts of the specimen are preserved in different ways, you can choose several methods.
   */
  preservation?: Array<string>;
  /**
   * Origin or source of the garden accession
   */
  provenance?: Unit.ProvenanceEnum;
  /**
   * PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
   */
  publicityRestrictions?: Unit.PublicityRestrictionsEnum;
  /**
   * Type of record, most commonly preserved specimen for museum specimens and observation for associated observations (\\\"seuralaislajihavainto\\\").
   */
  recordBasis?: Unit.RecordBasisEnum;
  /**
   * What parts of the record are / have been in storage.
   */
  recordParts?: Array<string>;
  /**
   * Bird or bat ring number, code, colour code or such
   */
  ring?: string;
  /**
   * Main method for (usually intentional) sampling
   */
  samplingMethod?: Unit.SamplingMethodEnum;
  samplingMethodNotes?: string;
  /**
   * Sex of the individual(s)
   */
  sex?: Unit.SexEnum;
  /**
   * E.g. how sex was determined, by whom and when.
   */
  sexNotes?: string;
  shortHandText?: string;
  smell?: Unit.SmellEnum;
  smellNotes?: string;
  substrateClassification?: Unit.SubstrateClassificationEnum;
  substrateDecayStage?: Unit.SubstrateDecayStageEnum;
  substrateNotes?: string;
  substrateSpecies?: string;
  /**
   * QName for MX.taxon
   */
  substrateSpeciesID?: string;
  substrateSpeciesInformalNameString?: string;
  substrateTreeClassification?: Array<string>;
  tailInMillimeters?: Array<string>;
  taste?: Unit.TasteEnum;
  tasteNotes?: string;
  taxonConfidence?: Unit.TaxonConfidenceEnum;
  twitched?: boolean;
  /**
   * QName for MY.typeSpecimen
   */
  typeSpecimen?: Array<string>;
  /**
   * Array of typeSpecimens
   */
  typeSpecimens?: Array<TypeSpecimen>;
  /**
   * instance of unitFact
   */
  unitFact?: UnitFact;
  /**
   * instance of unitGathering
   */
  unitGathering?: UnitGathering;
  unitType?: Array<string>;
  weightInGrams?: Array<string>;
  wild?: Unit.WildEnum;
  wingInMillimeters?: Array<string>;
}

export namespace Unit {
  export type AtlasCodeEnum =
    'MY.atlasCodeEnum1'
    | 'MY.atlasCodeEnum2'
    | 'MY.atlasCodeEnum3'
    | 'MY.atlasCodeEnum4'
    | 'MY.atlasCodeEnum5'
    | 'MY.atlasCodeEnum6'
    | 'MY.atlasCodeEnum7'
    | 'MY.atlasCodeEnum8'
    | 'MY.atlasCodeEnum61'
    | 'MY.atlasCodeEnum62'
    | 'MY.atlasCodeEnum63'
    | 'MY.atlasCodeEnum64'
    | 'MY.atlasCodeEnum65'
    | 'MY.atlasCodeEnum66'
    | 'MY.atlasCodeEnum71'
    | 'MY.atlasCodeEnum72'
    | 'MY.atlasCodeEnum73'
    | 'MY.atlasCodeEnum74'
    | 'MY.atlasCodeEnum75'
    | 'MY.atlasCodeEnum81'
    | 'MY.atlasCodeEnum82';
  export const AtlasCodeEnum = {
    AtlasCodeEnum1: 'MY.atlasCodeEnum1' as AtlasCodeEnum,
    AtlasCodeEnum2: 'MY.atlasCodeEnum2' as AtlasCodeEnum,
    AtlasCodeEnum3: 'MY.atlasCodeEnum3' as AtlasCodeEnum,
    AtlasCodeEnum4: 'MY.atlasCodeEnum4' as AtlasCodeEnum,
    AtlasCodeEnum5: 'MY.atlasCodeEnum5' as AtlasCodeEnum,
    AtlasCodeEnum6: 'MY.atlasCodeEnum6' as AtlasCodeEnum,
    AtlasCodeEnum7: 'MY.atlasCodeEnum7' as AtlasCodeEnum,
    AtlasCodeEnum8: 'MY.atlasCodeEnum8' as AtlasCodeEnum,
    AtlasCodeEnum61: 'MY.atlasCodeEnum61' as AtlasCodeEnum,
    AtlasCodeEnum62: 'MY.atlasCodeEnum62' as AtlasCodeEnum,
    AtlasCodeEnum63: 'MY.atlasCodeEnum63' as AtlasCodeEnum,
    AtlasCodeEnum64: 'MY.atlasCodeEnum64' as AtlasCodeEnum,
    AtlasCodeEnum65: 'MY.atlasCodeEnum65' as AtlasCodeEnum,
    AtlasCodeEnum66: 'MY.atlasCodeEnum66' as AtlasCodeEnum,
    AtlasCodeEnum71: 'MY.atlasCodeEnum71' as AtlasCodeEnum,
    AtlasCodeEnum72: 'MY.atlasCodeEnum72' as AtlasCodeEnum,
    AtlasCodeEnum73: 'MY.atlasCodeEnum73' as AtlasCodeEnum,
    AtlasCodeEnum74: 'MY.atlasCodeEnum74' as AtlasCodeEnum,
    AtlasCodeEnum75: 'MY.atlasCodeEnum75' as AtlasCodeEnum,
    AtlasCodeEnum81: 'MY.atlasCodeEnum81' as AtlasCodeEnum,
    AtlasCodeEnum82: 'MY.atlasCodeEnum82' as AtlasCodeEnum
  };
  export type BatBehaviorEnum = 'MY.batBehaviorHibernating' | 'MY.batBehaviorRoosting' | 'MY.batBehaviorHunting' | 'MY.batBehaviorDead';
  export const BatBehaviorEnum = {
    BatBehaviorHibernating: 'MY.batBehaviorHibernating' as BatBehaviorEnum,
    BatBehaviorRoosting: 'MY.batBehaviorRoosting' as BatBehaviorEnum,
    BatBehaviorHunting: 'MY.batBehaviorHunting' as BatBehaviorEnum,
    BatBehaviorDead: 'MY.batBehaviorDead' as BatBehaviorEnum
  };
  export type BirdAgeEnum =
    'MY.birdAgePp'
    | 'MY.birdAgePm'
    | 'MY.birdAgeFl'
    | 'MY.birdAgePlus1kv'
    | 'MY.birdAge1Kv'
    | 'MY.birdAgePlus2Kv'
    | 'MY.birdAge2kv'
    | 'MY.birdAgePlus3Kv'
    | 'MY.birdAge3Kv'
    | 'MY.birdAgePlus4Kv'
    | 'MY.birdAge4Kv'
    | 'MY.birdAgePlus5Kv'
    | 'MY.birdAge5Kv'
    | 'MY.birdAgePlus6Kv'
    | 'MY.birdAge6Kv'
    | 'MY.birdAgePlus7Kv'
    | 'MY.birdAge7Kv'
    | 'MY.birdAgePlus8Kv'
    | 'MY.birdAge8Kv';
  export const BirdAgeEnum = {
    BirdAgePp: 'MY.birdAgePp' as BirdAgeEnum,
    BirdAgePm: 'MY.birdAgePm' as BirdAgeEnum,
    BirdAgeFl: 'MY.birdAgeFl' as BirdAgeEnum,
    BirdAgePlus1kv: 'MY.birdAgePlus1kv' as BirdAgeEnum,
    BirdAge1Kv: 'MY.birdAge1Kv' as BirdAgeEnum,
    BirdAgePlus2Kv: 'MY.birdAgePlus2Kv' as BirdAgeEnum,
    BirdAge2kv: 'MY.birdAge2kv' as BirdAgeEnum,
    BirdAgePlus3Kv: 'MY.birdAgePlus3Kv' as BirdAgeEnum,
    BirdAge3Kv: 'MY.birdAge3Kv' as BirdAgeEnum,
    BirdAgePlus4Kv: 'MY.birdAgePlus4Kv' as BirdAgeEnum,
    BirdAge4Kv: 'MY.birdAge4Kv' as BirdAgeEnum,
    BirdAgePlus5Kv: 'MY.birdAgePlus5Kv' as BirdAgeEnum,
    BirdAge5Kv: 'MY.birdAge5Kv' as BirdAgeEnum,
    BirdAgePlus6Kv: 'MY.birdAgePlus6Kv' as BirdAgeEnum,
    BirdAge6Kv: 'MY.birdAge6Kv' as BirdAgeEnum,
    BirdAgePlus7Kv: 'MY.birdAgePlus7Kv' as BirdAgeEnum,
    BirdAge7Kv: 'MY.birdAge7Kv' as BirdAgeEnum,
    BirdAgePlus8Kv: 'MY.birdAgePlus8Kv' as BirdAgeEnum,
    BirdAge8Kv: 'MY.birdAge8Kv' as BirdAgeEnum
  };
  export type BirdPlumageEnum =
    'MY.birdPlumageAd'
    | 'MY.birdPlumageEijp'
    | 'MY.birdPlumageImm'
    | 'MY.birdPlumageJp'
    | 'MY.birdPlumageJuv'
    | 'MY.birdPlumageNpuk'
    | 'MY.birdPlumagePull'
    | 'MY.birdPlumageSubad'
    | 'MY.birdPlumageTp'
    | 'MY.birdPlumageVp'
    | 'MY.birdPlumagePep'
    | 'MY.birdPlumageSs';
  export const BirdPlumageEnum = {
    BirdPlumageAd: 'MY.birdPlumageAd' as BirdPlumageEnum,
    BirdPlumageEijp: 'MY.birdPlumageEijp' as BirdPlumageEnum,
    BirdPlumageImm: 'MY.birdPlumageImm' as BirdPlumageEnum,
    BirdPlumageJp: 'MY.birdPlumageJp' as BirdPlumageEnum,
    BirdPlumageJuv: 'MY.birdPlumageJuv' as BirdPlumageEnum,
    BirdPlumageNpuk: 'MY.birdPlumageNpuk' as BirdPlumageEnum,
    BirdPlumagePull: 'MY.birdPlumagePull' as BirdPlumageEnum,
    BirdPlumageSubad: 'MY.birdPlumageSubad' as BirdPlumageEnum,
    BirdPlumageTp: 'MY.birdPlumageTp' as BirdPlumageEnum,
    BirdPlumageVp: 'MY.birdPlumageVp' as BirdPlumageEnum,
    BirdPlumagePep: 'MY.birdPlumagePep' as BirdPlumageEnum,
    BirdPlumageSs: 'MY.birdPlumageSs' as BirdPlumageEnum
  };
  export type DistanceEnum = 'MY.distanceOverFlight' | 'MY.distanceNear' | 'MY.distanceQuiteFar' | 'MY.distanceFar' | 'MY.distanceVeryFar';
  export const DistanceEnum = {
    DistanceOverFlight: 'MY.distanceOverFlight' as DistanceEnum,
    DistanceNear: 'MY.distanceNear' as DistanceEnum,
    DistanceQuiteFar: 'MY.distanceQuiteFar' as DistanceEnum,
    DistanceFar: 'MY.distanceFar' as DistanceEnum,
    DistanceVeryFar: 'MY.distanceVeryFar' as DistanceEnum
  };
  export type EarliestEpochOrLowestSeriesEnum =
    'MY.epochOrSeriesCambrian'
    | 'MY.epochOrSeriesCarboniferous'
    | 'MY.epochOrSeriesCretaceous'
    | 'MY.epochOrSeriesDevonian'
    | 'MY.epochOrSeriesEdiacaran'
    | 'MY.epochOrSeriesJurassic'
    | 'MY.epochOrSeriesOrdovician'
    | 'MY.epochOrSeriesPermian'
    | 'MY.epochOrSeriesQuaternary'
    | 'MY.epochOrSeriesRecent'
    | 'MY.epochOrSeriesSilurian'
    | 'MY.epochOrSeriesTertiary'
    | 'MY.epochOrSeriesTriassic';
  export const EarliestEpochOrLowestSeriesEnum = {
    EpochOrSeriesCambrian: 'MY.epochOrSeriesCambrian' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesCarboniferous: 'MY.epochOrSeriesCarboniferous' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesCretaceous: 'MY.epochOrSeriesCretaceous' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesDevonian: 'MY.epochOrSeriesDevonian' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesEdiacaran: 'MY.epochOrSeriesEdiacaran' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesJurassic: 'MY.epochOrSeriesJurassic' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesOrdovician: 'MY.epochOrSeriesOrdovician' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesPermian: 'MY.epochOrSeriesPermian' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesQuaternary: 'MY.epochOrSeriesQuaternary' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesRecent: 'MY.epochOrSeriesRecent' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesSilurian: 'MY.epochOrSeriesSilurian' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesTertiary: 'MY.epochOrSeriesTertiary' as EarliestEpochOrLowestSeriesEnum,
    EpochOrSeriesTriassic: 'MY.epochOrSeriesTriassic' as EarliestEpochOrLowestSeriesEnum
  };
  export type LatestEpochOrHighestSeriesEnum =
    'MY.epochOrSeriesCambrian'
    | 'MY.epochOrSeriesCarboniferous'
    | 'MY.epochOrSeriesCretaceous'
    | 'MY.epochOrSeriesDevonian'
    | 'MY.epochOrSeriesEdiacaran'
    | 'MY.epochOrSeriesJurassic'
    | 'MY.epochOrSeriesOrdovician'
    | 'MY.epochOrSeriesPermian'
    | 'MY.epochOrSeriesQuaternary'
    | 'MY.epochOrSeriesRecent'
    | 'MY.epochOrSeriesSilurian'
    | 'MY.epochOrSeriesTertiary'
    | 'MY.epochOrSeriesTriassic';
  export const LatestEpochOrHighestSeriesEnum = {
    EpochOrSeriesCambrian: 'MY.epochOrSeriesCambrian' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesCarboniferous: 'MY.epochOrSeriesCarboniferous' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesCretaceous: 'MY.epochOrSeriesCretaceous' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesDevonian: 'MY.epochOrSeriesDevonian' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesEdiacaran: 'MY.epochOrSeriesEdiacaran' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesJurassic: 'MY.epochOrSeriesJurassic' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesOrdovician: 'MY.epochOrSeriesOrdovician' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesPermian: 'MY.epochOrSeriesPermian' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesQuaternary: 'MY.epochOrSeriesQuaternary' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesRecent: 'MY.epochOrSeriesRecent' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesSilurian: 'MY.epochOrSeriesSilurian' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesTertiary: 'MY.epochOrSeriesTertiary' as LatestEpochOrHighestSeriesEnum,
    EpochOrSeriesTriassic: 'MY.epochOrSeriesTriassic' as LatestEpochOrHighestSeriesEnum
  };
  export type LifeStageEnum =
    'MY.lifeStageEgg'
    | 'MY.lifeStageLarva'
    | 'MY.lifeStagePupa'
    | 'MY.lifeStageJuvenile'
    | 'MY.lifeStageNymph'
    | 'MY.lifeStageSubimago'
    | 'MY.lifeStageImmature'
    | 'MY.lifeStageAdult'
    | 'MY.lifeStageFertile'
    | 'MY.lifeStageSterile'
    | 'MY.lifeStageTadpole'
    | 'MY.lifeStageDead'
    | 'MY.lifeStageAlive'
    | 'MY.lifeStageEmbryo'
    | 'MY.lifeStageSubadult'
    | 'MY.lifeStageMature'
    | 'MY.lifeStagePullus'
    | 'MY.lifeStageHatchedEgg'
    | 'MY.lifeStageHatchedPupa'
    | 'MY.lifeStageGall'
    | 'MY.lifeStageMarks';
  export const LifeStageEnum = {
    LifeStageEgg: 'MY.lifeStageEgg' as LifeStageEnum,
    LifeStageLarva: 'MY.lifeStageLarva' as LifeStageEnum,
    LifeStagePupa: 'MY.lifeStagePupa' as LifeStageEnum,
    LifeStageJuvenile: 'MY.lifeStageJuvenile' as LifeStageEnum,
    LifeStageNymph: 'MY.lifeStageNymph' as LifeStageEnum,
    LifeStageSubimago: 'MY.lifeStageSubimago' as LifeStageEnum,
    LifeStageImmature: 'MY.lifeStageImmature' as LifeStageEnum,
    LifeStageAdult: 'MY.lifeStageAdult' as LifeStageEnum,
    LifeStageFertile: 'MY.lifeStageFertile' as LifeStageEnum,
    LifeStageSterile: 'MY.lifeStageSterile' as LifeStageEnum,
    LifeStageTadpole: 'MY.lifeStageTadpole' as LifeStageEnum,
    LifeStageDead: 'MY.lifeStageDead' as LifeStageEnum,
    LifeStageAlive: 'MY.lifeStageAlive' as LifeStageEnum,
    LifeStageEmbryo: 'MY.lifeStageEmbryo' as LifeStageEnum,
    LifeStageSubadult: 'MY.lifeStageSubadult' as LifeStageEnum,
    LifeStageMature: 'MY.lifeStageMature' as LifeStageEnum,
    LifeStagePullus: 'MY.lifeStagePullus' as LifeStageEnum,
    LifeStageHatchedEgg: 'MY.lifeStageHatchedEgg' as LifeStageEnum,
    LifeStageHatchedPupa: 'MY.lifeStageHatchedPupa' as LifeStageEnum,
    LifeStageGall: 'MY.lifeStageGall' as LifeStageEnum,
    LifeStageMarks: 'MY.lifeStageMarks' as LifeStageEnum
  };
  export type MicrobiologicalRiskGroupEnum =
    'MY.microbiologicalRiskGroup1'
    | 'MY.microbiologicalRiskGroup2'
    | 'MY.microbiologicalRiskGroup3'
    | 'MY.microbiologicalRiskGroup4';
  export const MicrobiologicalRiskGroupEnum = {
    MicrobiologicalRiskGroup1: 'MY.microbiologicalRiskGroup1' as MicrobiologicalRiskGroupEnum,
    MicrobiologicalRiskGroup2: 'MY.microbiologicalRiskGroup2' as MicrobiologicalRiskGroupEnum,
    MicrobiologicalRiskGroup3: 'MY.microbiologicalRiskGroup3' as MicrobiologicalRiskGroupEnum,
    MicrobiologicalRiskGroup4: 'MY.microbiologicalRiskGroup4' as MicrobiologicalRiskGroupEnum
  };
  export type MovingDirectionEnum =
    'MY.movingDirectionN'
    | 'MY.movingDirectionNNE'
    | 'MY.movingDirectionNE'
    | 'MY.movingDirectionENE'
    | 'MY.movingDirectionE'
    | 'MY.movingDirectionESE'
    | 'MY.movingDirectionSE'
    | 'MY.movingDirectionSSE'
    | 'MY.MovingDirectionS'
    | 'MY.movingDirectionSSW'
    | 'MY.movingDirectionSW'
    | 'MY.movingDirectionWSW'
    | 'MY.movingDirectionW'
    | 'MY.movingDirectionWNW'
    | 'MY.movingDirectionNW'
    | 'MY.movingDirectionNNW';
  export const MovingDirectionEnum = {
    MovingDirectionN: 'MY.movingDirectionN' as MovingDirectionEnum,
    MovingDirectionNNE: 'MY.movingDirectionNNE' as MovingDirectionEnum,
    MovingDirectionNE: 'MY.movingDirectionNE' as MovingDirectionEnum,
    MovingDirectionENE: 'MY.movingDirectionENE' as MovingDirectionEnum,
    MovingDirectionE: 'MY.movingDirectionE' as MovingDirectionEnum,
    MovingDirectionESE: 'MY.movingDirectionESE' as MovingDirectionEnum,
    MovingDirectionSE: 'MY.movingDirectionSE' as MovingDirectionEnum,
    MovingDirectionSSE: 'MY.movingDirectionSSE' as MovingDirectionEnum,
    MovingDirectionS: 'MY.MovingDirectionS' as MovingDirectionEnum,
    MovingDirectionSSW: 'MY.movingDirectionSSW' as MovingDirectionEnum,
    MovingDirectionSW: 'MY.movingDirectionSW' as MovingDirectionEnum,
    MovingDirectionWSW: 'MY.movingDirectionWSW' as MovingDirectionEnum,
    MovingDirectionW: 'MY.movingDirectionW' as MovingDirectionEnum,
    MovingDirectionWNW: 'MY.movingDirectionWNW' as MovingDirectionEnum,
    MovingDirectionNW: 'MY.movingDirectionNW' as MovingDirectionEnum,
    MovingDirectionNNW: 'MY.movingDirectionNNW' as MovingDirectionEnum
  };
  export type NativeStatusEnum = 'MY.native' | 'MY.nonNative';
  export const NativeStatusEnum = {
    Native: 'MY.native' as NativeStatusEnum,
    NonNative: 'MY.nonNative' as NativeStatusEnum
  };
  export type PlantLifeStageEnum =
    'MY.plantLifeStageSterile'
    | 'MY.plantLifeStageFertile'
    | 'MY.plantLifeStageSeed'
    | 'MY.plantLifeStageSprout'
    | 'MY.plantLifeStageBud'
    | 'MY.plantLifeStageFlower'
    | 'MY.plantLifeStageWitheredFlower'
    | 'MY.plantLifeStageRipeningFruit'
    | 'MY.plantLifeStageRipeFruit'
    | 'MY.plantLifeStageDeadSprout'
    | 'MY.plantLifeStageSubterranean'
    | 'MY.plantLifeStageLivingPlant'
    | 'MY.plantLifeStageDeadPlant';
  export const PlantLifeStageEnum = {
    PlantLifeStageSterile: 'MY.plantLifeStageSterile' as PlantLifeStageEnum,
    PlantLifeStageFertile: 'MY.plantLifeStageFertile' as PlantLifeStageEnum,
    PlantLifeStageSeed: 'MY.plantLifeStageSeed' as PlantLifeStageEnum,
    PlantLifeStageSprout: 'MY.plantLifeStageSprout' as PlantLifeStageEnum,
    PlantLifeStageBud: 'MY.plantLifeStageBud' as PlantLifeStageEnum,
    PlantLifeStageFlower: 'MY.plantLifeStageFlower' as PlantLifeStageEnum,
    PlantLifeStageWitheredFlower: 'MY.plantLifeStageWitheredFlower' as PlantLifeStageEnum,
    PlantLifeStageRipeningFruit: 'MY.plantLifeStageRipeningFruit' as PlantLifeStageEnum,
    PlantLifeStageRipeFruit: 'MY.plantLifeStageRipeFruit' as PlantLifeStageEnum,
    PlantLifeStageDeadSprout: 'MY.plantLifeStageDeadSprout' as PlantLifeStageEnum,
    PlantLifeStageSubterranean: 'MY.plantLifeStageSubterranean' as PlantLifeStageEnum,
    PlantLifeStageLivingPlant: 'MY.plantLifeStageLivingPlant' as PlantLifeStageEnum,
    PlantLifeStageDeadPlant: 'MY.plantLifeStageDeadPlant' as PlantLifeStageEnum
  };
  export type PlantStatusCodeEnum =
    'MY.MY.plantStatusCodeL'
    | 'MY.plantStatusCodeA'
    | 'MY.plantStatusCodeAV'
    | 'MY.plantStatusCodeAOV'
    | 'MY.plantStatusCodeAN'
    | 'MY.plantStatusCodeANV'
    | 'MY.plantStatusCodeANS'
    | 'MY.plantStatusCodeT'
    | 'MY.plantStatusCodeTV'
    | 'MY.plantStatusCodeTOV'
    | 'MY.plantStatusCodeTNV'
    | 'MY.plantStatusCodeTNS'
    | 'MY.plantStatusCodeV'
    | 'MY.plantStatusCodeOV'
    | 'MY.plantStatusCodeN'
    | 'MY.plantStatusCodeNV'
    | 'MY.plantStatusCodeNS'
    | 'MY.plantStatusCodeE'
    | 'MY.plantStatusCodeTE'
    | 'MY.plantStatusCodeTVE'
    | 'MY.plantStatusCodeTOVE'
    | 'MY.plantStatusCodeTNVE'
    | 'MY.plantStatusCodeTNSE'
    | 'MY.plantStatusCodeTN'
    | 'MY.plantStatusCodeTNE'
    | 'MY.plantStatusCodeR'
    | 'MY.plantStatusCodeC'
    | 'MY.plantStatusCodeH'
    | 'MY.plantStatusCodeG'
    | 'MY.plantStatusCodeF';
  export const PlantStatusCodeEnum = {
    MYPlantStatusCodeL: 'MY.MY.plantStatusCodeL' as PlantStatusCodeEnum,
    PlantStatusCodeA: 'MY.plantStatusCodeA' as PlantStatusCodeEnum,
    PlantStatusCodeAV: 'MY.plantStatusCodeAV' as PlantStatusCodeEnum,
    PlantStatusCodeAOV: 'MY.plantStatusCodeAOV' as PlantStatusCodeEnum,
    PlantStatusCodeAN: 'MY.plantStatusCodeAN' as PlantStatusCodeEnum,
    PlantStatusCodeANV: 'MY.plantStatusCodeANV' as PlantStatusCodeEnum,
    PlantStatusCodeANS: 'MY.plantStatusCodeANS' as PlantStatusCodeEnum,
    PlantStatusCodeT: 'MY.plantStatusCodeT' as PlantStatusCodeEnum,
    PlantStatusCodeTV: 'MY.plantStatusCodeTV' as PlantStatusCodeEnum,
    PlantStatusCodeTOV: 'MY.plantStatusCodeTOV' as PlantStatusCodeEnum,
    PlantStatusCodeTNV: 'MY.plantStatusCodeTNV' as PlantStatusCodeEnum,
    PlantStatusCodeTNS: 'MY.plantStatusCodeTNS' as PlantStatusCodeEnum,
    PlantStatusCodeV: 'MY.plantStatusCodeV' as PlantStatusCodeEnum,
    PlantStatusCodeOV: 'MY.plantStatusCodeOV' as PlantStatusCodeEnum,
    PlantStatusCodeN: 'MY.plantStatusCodeN' as PlantStatusCodeEnum,
    PlantStatusCodeNV: 'MY.plantStatusCodeNV' as PlantStatusCodeEnum,
    PlantStatusCodeNS: 'MY.plantStatusCodeNS' as PlantStatusCodeEnum,
    PlantStatusCodeE: 'MY.plantStatusCodeE' as PlantStatusCodeEnum,
    PlantStatusCodeTE: 'MY.plantStatusCodeTE' as PlantStatusCodeEnum,
    PlantStatusCodeTVE: 'MY.plantStatusCodeTVE' as PlantStatusCodeEnum,
    PlantStatusCodeTOVE: 'MY.plantStatusCodeTOVE' as PlantStatusCodeEnum,
    PlantStatusCodeTNVE: 'MY.plantStatusCodeTNVE' as PlantStatusCodeEnum,
    PlantStatusCodeTNSE: 'MY.plantStatusCodeTNSE' as PlantStatusCodeEnum,
    PlantStatusCodeTN: 'MY.plantStatusCodeTN' as PlantStatusCodeEnum,
    PlantStatusCodeTNE: 'MY.plantStatusCodeTNE' as PlantStatusCodeEnum,
    PlantStatusCodeR: 'MY.plantStatusCodeR' as PlantStatusCodeEnum,
    PlantStatusCodeC: 'MY.plantStatusCodeC' as PlantStatusCodeEnum,
    PlantStatusCodeH: 'MY.plantStatusCodeH' as PlantStatusCodeEnum,
    PlantStatusCodeG: 'MY.plantStatusCodeG' as PlantStatusCodeEnum,
    PlantStatusCodeF: 'MY.plantStatusCodeF' as PlantStatusCodeEnum
  };
  export type ProvenanceEnum =
    'MY.provenanceUnknown'
    | 'MY.provenanceCultivated'
    | 'MY.provenanceCultivatedUnsure'
    | 'MY.provenanceCultivatedPropagatedFromWildSource'
    | 'MY.provenanceWildSource'
    | 'MY.provenanceWildSourceUnsure'
    | 'MY.provenanceEscapedCultivated'
    | 'MY.provenancePropagule';
  export const ProvenanceEnum = {
    ProvenanceUnknown: 'MY.provenanceUnknown' as ProvenanceEnum,
    ProvenanceCultivated: 'MY.provenanceCultivated' as ProvenanceEnum,
    ProvenanceCultivatedUnsure: 'MY.provenanceCultivatedUnsure' as ProvenanceEnum,
    ProvenanceCultivatedPropagatedFromWildSource: 'MY.provenanceCultivatedPropagatedFromWildSource' as ProvenanceEnum,
    ProvenanceWildSource: 'MY.provenanceWildSource' as ProvenanceEnum,
    ProvenanceWildSourceUnsure: 'MY.provenanceWildSourceUnsure' as ProvenanceEnum,
    ProvenanceEscapedCultivated: 'MY.provenanceEscapedCultivated' as ProvenanceEnum,
    ProvenancePropagule: 'MY.provenancePropagule' as ProvenanceEnum
  };
  export type PublicityRestrictionsEnum =
    'MZ.publicityRestrictionsPublic'
    | 'MZ.publicityRestrictionsProtected'
    | 'MZ.publicityRestrictionsPrivate';
  export const PublicityRestrictionsEnum = {
    PublicityRestrictionsPublic: 'MZ.publicityRestrictionsPublic' as PublicityRestrictionsEnum,
    PublicityRestrictionsProtected: 'MZ.publicityRestrictionsProtected' as PublicityRestrictionsEnum,
    PublicityRestrictionsPrivate: 'MZ.publicityRestrictionsPrivate' as PublicityRestrictionsEnum
  };
  export type RecordBasisEnum =
    'MY.recordBasisPreservedSpecimen'
    | 'MY.recordBasisHumanObservation'
    | 'MY.recordBasisHumanObservationSeen'
    | 'MY.recordBasisHumanObservationHeard'
    | 'MY.recordBasisHumanObservationHandled'
    | 'MY.recordBasisHumanObservationPhoto'
    | 'MY.recordBasisHumanObservationAudio'
    | 'MY.recordBasisHumanObservationVideo'
    | 'MY.recordBasisHumanObservationIndirect'
    | 'MY.recordBasisMachineObservation'
    | 'MY.recordBasisMachineObservationVideo'
    | 'MY.recordBasisMachineObservationAudio'
    | 'MY.recordBasisMachineObservationGeologger'
    | 'MY.recordBasisMachineObservationSatelliteTransmitter'
    | 'MY.recordBasisFossilSpecimen'
    | 'MY.recordBasisSubfossilSpecimen'
    | 'MY.recordBasisLivingSpecimen'
    | 'MY.recordBasisMicrobialSpecimen'
    | 'MY.recordBasisLiterature'
    | 'MY.recordBasisMaterialSample';
  export const RecordBasisEnum = {
    RecordBasisPreservedSpecimen: 'MY.recordBasisPreservedSpecimen' as RecordBasisEnum,
    RecordBasisHumanObservation: 'MY.recordBasisHumanObservation' as RecordBasisEnum,
    RecordBasisHumanObservationSeen: 'MY.recordBasisHumanObservationSeen' as RecordBasisEnum,
    RecordBasisHumanObservationHeard: 'MY.recordBasisHumanObservationHeard' as RecordBasisEnum,
    RecordBasisHumanObservationHandled: 'MY.recordBasisHumanObservationHandled' as RecordBasisEnum,
    RecordBasisHumanObservationPhoto: 'MY.recordBasisHumanObservationPhoto' as RecordBasisEnum,
    RecordBasisHumanObservationAudio: 'MY.recordBasisHumanObservationAudio' as RecordBasisEnum,
    RecordBasisHumanObservationVideo: 'MY.recordBasisHumanObservationVideo' as RecordBasisEnum,
    RecordBasisHumanObservationIndirect: 'MY.recordBasisHumanObservationIndirect' as RecordBasisEnum,
    RecordBasisMachineObservation: 'MY.recordBasisMachineObservation' as RecordBasisEnum,
    RecordBasisMachineObservationVideo: 'MY.recordBasisMachineObservationVideo' as RecordBasisEnum,
    RecordBasisMachineObservationAudio: 'MY.recordBasisMachineObservationAudio' as RecordBasisEnum,
    RecordBasisMachineObservationGeologger: 'MY.recordBasisMachineObservationGeologger' as RecordBasisEnum,
    RecordBasisMachineObservationSatelliteTransmitter: 'MY.recordBasisMachineObservationSatelliteTransmitter' as RecordBasisEnum,
    RecordBasisFossilSpecimen: 'MY.recordBasisFossilSpecimen' as RecordBasisEnum,
    RecordBasisSubfossilSpecimen: 'MY.recordBasisSubfossilSpecimen' as RecordBasisEnum,
    RecordBasisLivingSpecimen: 'MY.recordBasisLivingSpecimen' as RecordBasisEnum,
    RecordBasisMicrobialSpecimen: 'MY.recordBasisMicrobialSpecimen' as RecordBasisEnum,
    RecordBasisLiterature: 'MY.recordBasisLiterature' as RecordBasisEnum,
    RecordBasisMaterialSample: 'MY.recordBasisMaterialSample' as RecordBasisEnum
  };
  export type SamplingMethodEnum =
    'MY.samplingMethodLight'
    | 'MY.samplingMethodLightTrap'
    | 'MY.samplingMethodTrap'
    | 'MY.samplingMethodMalaise'
    | 'MY.samplingMethodPitfall'
    | 'MY.samplingMethodWindowtrap'
    | 'MY.samplingMethodYellowWindowTrap'
    | 'MY.samplingMethodPantrap'
    | 'MY.samplingMethodYellowpan'
    | 'MY.samplingMethodYellowtrap'
    | 'MY.samplingMethodFeromonetrap'
    | 'MY.samplingMethodBaittrap'
    | 'MY.samplingMethodBait'
    | 'MY.samplingMethodNet'
    | 'MY.samplingMethodSweeping'
    | 'MY.samplingMethodCarnet'
    | 'MY.samplingMethodMistnet'
    | 'MY.samplingMethodBoard'
    | 'MY.samplingMethodReared'
    | 'MY.samplingMethodExovo'
    | 'MY.samplingMethodElarva'
    | 'MY.samplingMethodEpupa'
    | 'MY.samplingMethodEclectortrap'
    | 'MY.samplingMethodHand'
    | 'MY.samplingMethodSifting'
    | 'MY.samplingMethodSoilsample'
    | 'MY.samplingMethodDropping'
    | 'MY.samplingMethodWashing'
    | 'MY.samplingMethodDigging'
    | 'MY.samplingMethodDiving'
    | 'MY.samplingMethodDrag'
    | 'MY.samplingMethodTriangleDrag'
    | 'MY.samplingMethodFishNet'
    | 'MY.samplingMethodElectrofishing'
    | 'MY.samplingMethodAngleFishing'
    | 'MY.samplingMethodFishTrap'
    | 'MY.samplingMethodSeine'
    | 'MY.samplingMethodTrawling'
    | 'MY.samplingMethodBeamTrawl'
    | 'MY.samplingMethodOther';
  export const SamplingMethodEnum = {
    SamplingMethodLight: 'MY.samplingMethodLight' as SamplingMethodEnum,
    SamplingMethodLightTrap: 'MY.samplingMethodLightTrap' as SamplingMethodEnum,
    SamplingMethodTrap: 'MY.samplingMethodTrap' as SamplingMethodEnum,
    SamplingMethodMalaise: 'MY.samplingMethodMalaise' as SamplingMethodEnum,
    SamplingMethodPitfall: 'MY.samplingMethodPitfall' as SamplingMethodEnum,
    SamplingMethodWindowtrap: 'MY.samplingMethodWindowtrap' as SamplingMethodEnum,
    SamplingMethodYellowWindowTrap: 'MY.samplingMethodYellowWindowTrap' as SamplingMethodEnum,
    SamplingMethodPantrap: 'MY.samplingMethodPantrap' as SamplingMethodEnum,
    SamplingMethodYellowpan: 'MY.samplingMethodYellowpan' as SamplingMethodEnum,
    SamplingMethodYellowtrap: 'MY.samplingMethodYellowtrap' as SamplingMethodEnum,
    SamplingMethodFeromonetrap: 'MY.samplingMethodFeromonetrap' as SamplingMethodEnum,
    SamplingMethodBaittrap: 'MY.samplingMethodBaittrap' as SamplingMethodEnum,
    SamplingMethodBait: 'MY.samplingMethodBait' as SamplingMethodEnum,
    SamplingMethodNet: 'MY.samplingMethodNet' as SamplingMethodEnum,
    SamplingMethodSweeping: 'MY.samplingMethodSweeping' as SamplingMethodEnum,
    SamplingMethodCarnet: 'MY.samplingMethodCarnet' as SamplingMethodEnum,
    SamplingMethodMistnet: 'MY.samplingMethodMistnet' as SamplingMethodEnum,
    SamplingMethodBoard: 'MY.samplingMethodBoard' as SamplingMethodEnum,
    SamplingMethodReared: 'MY.samplingMethodReared' as SamplingMethodEnum,
    SamplingMethodExovo: 'MY.samplingMethodExovo' as SamplingMethodEnum,
    SamplingMethodElarva: 'MY.samplingMethodElarva' as SamplingMethodEnum,
    SamplingMethodEpupa: 'MY.samplingMethodEpupa' as SamplingMethodEnum,
    SamplingMethodEclectortrap: 'MY.samplingMethodEclectortrap' as SamplingMethodEnum,
    SamplingMethodHand: 'MY.samplingMethodHand' as SamplingMethodEnum,
    SamplingMethodSifting: 'MY.samplingMethodSifting' as SamplingMethodEnum,
    SamplingMethodSoilsample: 'MY.samplingMethodSoilsample' as SamplingMethodEnum,
    SamplingMethodDropping: 'MY.samplingMethodDropping' as SamplingMethodEnum,
    SamplingMethodWashing: 'MY.samplingMethodWashing' as SamplingMethodEnum,
    SamplingMethodDigging: 'MY.samplingMethodDigging' as SamplingMethodEnum,
    SamplingMethodDiving: 'MY.samplingMethodDiving' as SamplingMethodEnum,
    SamplingMethodDrag: 'MY.samplingMethodDrag' as SamplingMethodEnum,
    SamplingMethodTriangleDrag: 'MY.samplingMethodTriangleDrag' as SamplingMethodEnum,
    SamplingMethodFishNet: 'MY.samplingMethodFishNet' as SamplingMethodEnum,
    SamplingMethodElectrofishing: 'MY.samplingMethodElectrofishing' as SamplingMethodEnum,
    SamplingMethodAngleFishing: 'MY.samplingMethodAngleFishing' as SamplingMethodEnum,
    SamplingMethodFishTrap: 'MY.samplingMethodFishTrap' as SamplingMethodEnum,
    SamplingMethodSeine: 'MY.samplingMethodSeine' as SamplingMethodEnum,
    SamplingMethodTrawling: 'MY.samplingMethodTrawling' as SamplingMethodEnum,
    SamplingMethodBeamTrawl: 'MY.samplingMethodBeamTrawl' as SamplingMethodEnum,
    SamplingMethodOther: 'MY.samplingMethodOther' as SamplingMethodEnum
  };
  export type SexEnum = 'MY.sexM' | 'MY.sexF' | 'MY.sexW' | 'MY.sexU' | 'MY.sexN' | 'MY.sexX' | 'MY.sexE' | 'MY.sexC';
  export const SexEnum = {
    SexM: 'MY.sexM' as SexEnum,
    SexF: 'MY.sexF' as SexEnum,
    SexW: 'MY.sexW' as SexEnum,
    SexU: 'MY.sexU' as SexEnum,
    SexN: 'MY.sexN' as SexEnum,
    SexX: 'MY.sexX' as SexEnum,
    SexE: 'MY.sexE' as SexEnum,
    SexC: 'MY.sexC' as SexEnum
  };
  export type SmellEnum = 'MY.smellNotSmelled' | 'MY.smellNoSmelled' | 'MY.smellWeak' | 'MY.smellModerate' | 'MY.smellStrong';
  export const SmellEnum = {
    SmellNotSmelled: 'MY.smellNotSmelled' as SmellEnum,
    SmellNoSmelled: 'MY.smellNoSmelled' as SmellEnum,
    SmellWeak: 'MY.smellWeak' as SmellEnum,
    SmellModerate: 'MY.smellModerate' as SmellEnum,
    SmellStrong: 'MY.smellStrong' as SmellEnum
  };
  export type SubstrateClassificationEnum =
    'MY.substrateGround'
    | 'MY.substrateGroundLowShrubs'
    | 'MY.substrateGroundLichens'
    | 'MY.substrateGroundHerbs'
    | 'MY.substrateGroundMosses'
    | 'MY.substrateGroundSphagnum'
    | 'MY.substrateGroundGrassy'
    | 'MY.substrateGroundNeedleLitter'
    | 'MY.substrateGroundLeafLitter'
    | 'MY.substrateGroundMixedLitter'
    | 'MY.substrateGroundSandySoil'
    | 'MY.substrateGroundGravelSoil'
    | 'MY.substrateGroundClayeySoil'
    | 'MY.substrateGroundHeathHumus'
    | 'MY.substrateGroundMull'
    | 'MY.substrateGroundPeat'
    | 'MY.substrateGroundBurnedSoil'
    | 'MY.substrateLivingTree'
    | 'MY.substrateLivingTreeTrunk'
    | 'MY.substrateLivingTreeBase'
    | 'MY.substrateLivingTreeRoots'
    | 'MY.substrateLivingTreeBranch'
    | 'MY.substrateLivingTreeDeadBranch'
    | 'MY.substrateLivingTreeDeadLimb'
    | 'MY.substrateLivingTreeLeaf'
    | 'MY.substrateLivingTreeNeedle'
    | 'MY.substrateDeadWood'
    | 'MY.substrateDeadWoodStandingTreeTrunk'
    | 'MY.substrateDeadWoodStandingTreeBranch'
    | 'MY.substrateDeadWoodStandingTreeBase'
    | 'MY.substrateDeadWoodFallenTreeTrunk'
    | 'MY.substrateDeadWoodFallenTreeBranch'
    | 'MY.substrateDeadWoodUpturnedRoots'
    | 'MY.substrateDeadWoodDeadRoots'
    | 'MY.substrateDeadWoodStump'
    | 'MY.substrateDeadWoodFallenBranch'
    | 'MY.substrateDeadWoodCone'
    | 'MY.substrateDeadWoodTwigs'
    | 'MY.substrateDeadWoodBark'
    | 'MY.substrateDeadWoodSawdust'
    | 'MY.substrateDeadWoodPieceOfWood'
    | 'MY.substrateDeadWoodLoggingResidue'
    | 'MY.substrateDeadWoodLog'
    | 'MY.substrateDeadWoodDriftwood'
    | 'MY.substrateDeadWoodConstructionWood'
    | 'MY.substrateDung'
    | 'MY.substrateCompost'
    | 'MY.substrateLivingShoot'
    | 'MY.substrateDeadShoot'
    | 'MY.substrateLivingFungus'
    | 'MY.substrateDeadFungus'
    | 'MY.substrateLivingAnimal'
    | 'MY.substrateDeadAnimal'
    | 'MY.substrateRockSurface';
  export const SubstrateClassificationEnum = {
    SubstrateGround: 'MY.substrateGround' as SubstrateClassificationEnum,
    SubstrateGroundLowShrubs: 'MY.substrateGroundLowShrubs' as SubstrateClassificationEnum,
    SubstrateGroundLichens: 'MY.substrateGroundLichens' as SubstrateClassificationEnum,
    SubstrateGroundHerbs: 'MY.substrateGroundHerbs' as SubstrateClassificationEnum,
    SubstrateGroundMosses: 'MY.substrateGroundMosses' as SubstrateClassificationEnum,
    SubstrateGroundSphagnum: 'MY.substrateGroundSphagnum' as SubstrateClassificationEnum,
    SubstrateGroundGrassy: 'MY.substrateGroundGrassy' as SubstrateClassificationEnum,
    SubstrateGroundNeedleLitter: 'MY.substrateGroundNeedleLitter' as SubstrateClassificationEnum,
    SubstrateGroundLeafLitter: 'MY.substrateGroundLeafLitter' as SubstrateClassificationEnum,
    SubstrateGroundMixedLitter: 'MY.substrateGroundMixedLitter' as SubstrateClassificationEnum,
    SubstrateGroundSandySoil: 'MY.substrateGroundSandySoil' as SubstrateClassificationEnum,
    SubstrateGroundGravelSoil: 'MY.substrateGroundGravelSoil' as SubstrateClassificationEnum,
    SubstrateGroundClayeySoil: 'MY.substrateGroundClayeySoil' as SubstrateClassificationEnum,
    SubstrateGroundHeathHumus: 'MY.substrateGroundHeathHumus' as SubstrateClassificationEnum,
    SubstrateGroundMull: 'MY.substrateGroundMull' as SubstrateClassificationEnum,
    SubstrateGroundPeat: 'MY.substrateGroundPeat' as SubstrateClassificationEnum,
    SubstrateGroundBurnedSoil: 'MY.substrateGroundBurnedSoil' as SubstrateClassificationEnum,
    SubstrateLivingTree: 'MY.substrateLivingTree' as SubstrateClassificationEnum,
    SubstrateLivingTreeTrunk: 'MY.substrateLivingTreeTrunk' as SubstrateClassificationEnum,
    SubstrateLivingTreeBase: 'MY.substrateLivingTreeBase' as SubstrateClassificationEnum,
    SubstrateLivingTreeRoots: 'MY.substrateLivingTreeRoots' as SubstrateClassificationEnum,
    SubstrateLivingTreeBranch: 'MY.substrateLivingTreeBranch' as SubstrateClassificationEnum,
    SubstrateLivingTreeDeadBranch: 'MY.substrateLivingTreeDeadBranch' as SubstrateClassificationEnum,
    SubstrateLivingTreeDeadLimb: 'MY.substrateLivingTreeDeadLimb' as SubstrateClassificationEnum,
    SubstrateLivingTreeLeaf: 'MY.substrateLivingTreeLeaf' as SubstrateClassificationEnum,
    SubstrateLivingTreeNeedle: 'MY.substrateLivingTreeNeedle' as SubstrateClassificationEnum,
    SubstrateDeadWood: 'MY.substrateDeadWood' as SubstrateClassificationEnum,
    SubstrateDeadWoodStandingTreeTrunk: 'MY.substrateDeadWoodStandingTreeTrunk' as SubstrateClassificationEnum,
    SubstrateDeadWoodStandingTreeBranch: 'MY.substrateDeadWoodStandingTreeBranch' as SubstrateClassificationEnum,
    SubstrateDeadWoodStandingTreeBase: 'MY.substrateDeadWoodStandingTreeBase' as SubstrateClassificationEnum,
    SubstrateDeadWoodFallenTreeTrunk: 'MY.substrateDeadWoodFallenTreeTrunk' as SubstrateClassificationEnum,
    SubstrateDeadWoodFallenTreeBranch: 'MY.substrateDeadWoodFallenTreeBranch' as SubstrateClassificationEnum,
    SubstrateDeadWoodUpturnedRoots: 'MY.substrateDeadWoodUpturnedRoots' as SubstrateClassificationEnum,
    SubstrateDeadWoodDeadRoots: 'MY.substrateDeadWoodDeadRoots' as SubstrateClassificationEnum,
    SubstrateDeadWoodStump: 'MY.substrateDeadWoodStump' as SubstrateClassificationEnum,
    SubstrateDeadWoodFallenBranch: 'MY.substrateDeadWoodFallenBranch' as SubstrateClassificationEnum,
    SubstrateDeadWoodCone: 'MY.substrateDeadWoodCone' as SubstrateClassificationEnum,
    SubstrateDeadWoodTwigs: 'MY.substrateDeadWoodTwigs' as SubstrateClassificationEnum,
    SubstrateDeadWoodBark: 'MY.substrateDeadWoodBark' as SubstrateClassificationEnum,
    SubstrateDeadWoodSawdust: 'MY.substrateDeadWoodSawdust' as SubstrateClassificationEnum,
    SubstrateDeadWoodPieceOfWood: 'MY.substrateDeadWoodPieceOfWood' as SubstrateClassificationEnum,
    SubstrateDeadWoodLoggingResidue: 'MY.substrateDeadWoodLoggingResidue' as SubstrateClassificationEnum,
    SubstrateDeadWoodLog: 'MY.substrateDeadWoodLog' as SubstrateClassificationEnum,
    SubstrateDeadWoodDriftwood: 'MY.substrateDeadWoodDriftwood' as SubstrateClassificationEnum,
    SubstrateDeadWoodConstructionWood: 'MY.substrateDeadWoodConstructionWood' as SubstrateClassificationEnum,
    SubstrateDung: 'MY.substrateDung' as SubstrateClassificationEnum,
    SubstrateCompost: 'MY.substrateCompost' as SubstrateClassificationEnum,
    SubstrateLivingShoot: 'MY.substrateLivingShoot' as SubstrateClassificationEnum,
    SubstrateDeadShoot: 'MY.substrateDeadShoot' as SubstrateClassificationEnum,
    SubstrateLivingFungus: 'MY.substrateLivingFungus' as SubstrateClassificationEnum,
    SubstrateDeadFungus: 'MY.substrateDeadFungus' as SubstrateClassificationEnum,
    SubstrateLivingAnimal: 'MY.substrateLivingAnimal' as SubstrateClassificationEnum,
    SubstrateDeadAnimal: 'MY.substrateDeadAnimal' as SubstrateClassificationEnum,
    SubstrateRockSurface: 'MY.substrateRockSurface' as SubstrateClassificationEnum
  };
  export type SubstrateDecayStageEnum =
    'MY.substrateDecayStageEnum1'
    | 'MY.substrateDecayStageEnum2'
    | 'MY.substrateDecayStageEnum3'
    | 'MY.substrateDecayStageEnum4'
    | 'MY.substrateDecayStageEnum5';
  export const SubstrateDecayStageEnum = {
    SubstrateDecayStageEnum1: 'MY.substrateDecayStageEnum1' as SubstrateDecayStageEnum,
    SubstrateDecayStageEnum2: 'MY.substrateDecayStageEnum2' as SubstrateDecayStageEnum,
    SubstrateDecayStageEnum3: 'MY.substrateDecayStageEnum3' as SubstrateDecayStageEnum,
    SubstrateDecayStageEnum4: 'MY.substrateDecayStageEnum4' as SubstrateDecayStageEnum,
    SubstrateDecayStageEnum5: 'MY.substrateDecayStageEnum5' as SubstrateDecayStageEnum
  };
  export type TasteEnum = 'MY.tasteNotTasted' | 'MY.tasteNoTaste' | 'MY.tasteWeak' | 'MY.tasteModerate' | 'MY.tasteStrong';
  export const TasteEnum = {
    TasteNotTasted: 'MY.tasteNotTasted' as TasteEnum,
    TasteNoTaste: 'MY.tasteNoTaste' as TasteEnum,
    TasteWeak: 'MY.tasteWeak' as TasteEnum,
    TasteModerate: 'MY.tasteModerate' as TasteEnum,
    TasteStrong: 'MY.tasteStrong' as TasteEnum
  };
  export type TaxonConfidenceEnum = 'MY.taxonConfidenceSure' | 'MY.taxonConfidenceUnsure' | 'MY.taxonConfidenceSubspeciesUnsure';
  export const TaxonConfidenceEnum = {
    TaxonConfidenceSure: 'MY.taxonConfidenceSure' as TaxonConfidenceEnum,
    TaxonConfidenceUnsure: 'MY.taxonConfidenceUnsure' as TaxonConfidenceEnum,
    TaxonConfidenceSubspeciesUnsure: 'MY.taxonConfidenceSubspeciesUnsure' as TaxonConfidenceEnum
  };
  export type WildEnum = 'MY.wildWild' | 'MY.wildUnknown' | 'MY.wildNonWild';
  export const WildEnum = {
    WildWild: 'MY.wildWild' as WildEnum,
    WildUnknown: 'MY.wildUnknown' as WildEnum,
    WildNonWild: 'MY.wildNonWild' as WildEnum
  };
}
