/* eslint-disable max-len */
import { Taxon } from './taxon';

/**
 * API documentation
 * Access token is needed to use this API. To get a token, send a POST request with your email address to /api-users endpoint and one will be send to your. Each endpoint bellow has more information on how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.  You can find more documentation [here](https://laji.fi/about/806).  ##Endpoints  Observations and collections * Warehouse - Observation Data Warehouse API * Collection - Collection metadata * Source - Information sources (IT systems) * Annotation - Quality control   Taxonomy * Taxa - Taxonomy API * InformalTaxonGroup - Informal taxon groups are used in taxa and warehouse endpoints * Publication - Scientific publications * Checklist - Mainly you only work with one checklits: the FinBIF master checklist. There are others.   Other master data * Metadata - Variable descriptions * Area - Countries, municipalities and biogeographical provinces of Finland, etc. * Person - Information about people.   Helpers * APIUser - Register as an API user * Autocomplete - For making an autocomplete filed for taxa, collections or persons (friends) * PersonToken - Information about an authorized person   Vihko observation system * Form - Form definition * Document - Document instance of a form * Image - Image of a document   Laji.fi portal * Feedback - Feedback form API * Information - CMS content of information pages * Logger - Error logging from user's browsers to FinBIF * News - News
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


export interface Identifications {
  /**
   * Context for the given json
   */
  context?: string;

  /**
   * Write associated observation taxa names here, separated by a semicolon (;). E.g.: \\\"Betula pendula; Betula pubescens; Poaceae\\\". These will form their own units of the type observation.
   */
  associatedObservationTaxa?: string;
  /**
   * Author for the taxon
   */
  author?: string;
  /**
   * Name of the identifier (person) preferably in format \\\"lastname, firstname\\\"
   */
  det?: string;
  /**
   * Date or year when the identification was done, preferably in format \\\"d.m.Y\\\" or  \\\"Y\\\"
   */
  detDate?: string;
  detMethod?: Identifications.DetMethodEnum;
  /**
   * Name of the identifier and date of identification in original format (e.g. from the label), errors and all
   */
  detVerbatim?: string;
  /**
   * Additional qualifier or specifier at genus level (e.g. aff., cf.)
   */
  genusQualifier?: string;
  /**
   * Unique ID for the object. This will be automatically generated.
   */
  id?: string;
  identificationBasis?: Array<string>;
  identificationDate?: string;
  /**
   * Additional information on the identification, basis or such
   */
  identificationNotes?: string;
  /**
   * Author for the taxon below species level/infra epithet
   */
  infraAuthor?: string;
  /**
   * Taxon name for the epithet below species level
   */
  infraEpithet?: string;
  /**
   * Taxonomic level of the epithet below species level
   */
  infraRank?: Identifications.InfraRankEnum;
  /**
   * Pathovars, serovars and other infrasubspecific subdivisions of microbes.
   */
  infrasubspecificSubdivision?: string;
  isTaxonGroup?: boolean;
  /**
   * This can be used to select one of the identifications as 'recommended', which is the used as default when displaying information about the specimen.
   */
  preferredIdentification?: string;
  /**
   * PUBLIC: all data can be published; PROTECTED: exact locality is hidden (100*100km square); PRIVATE: most of the data is hidden. Empty value means same as public.
   */
  publicityRestrictions?: Identifications.PublicityRestrictionsEnum;
  /**
   * Publication reference for the taxon concept, that was used in identification
   */
  sec?: string;
  sortOrder?: number;
  /**
   * Additional qualifier at species level (e.g. aff., cf., sp. n., coll.)
   */
  speciesQualifier?: string;
  /**
   * Taxon name
   */
  taxon?: string;
  /**
   * ID for the taxon if has some other than an MX code
   */
  taxonID?: string;
  /**
   * Taxonomic level for the identification
   */
  taxonRank?: Taxon.TaxonRankEnum;
  taxonSpecifier?: string;
  /**
   * QName for MX.taxon
   */
  taxonURI?: string;
  /**
   * Taxon name in original format (e.g. from the label), errors and all
   */
  taxonVerbatim?: string;
}

export namespace Identifications {
  export type DetMethodEnum = 'MY.detMethodFreshSample' | 'MY.detMethodMicroscopy' | 'MY.detMethodPhoto';
  export const DetMethodEnum = {
    DetMethodFreshSample: 'MY.detMethodFreshSample' as DetMethodEnum,
    DetMethodMicroscopy: 'MY.detMethodMicroscopy' as DetMethodEnum,
    DetMethodPhoto: 'MY.detMethodPhoto' as DetMethodEnum
  };
  export type InfraRankEnum =
    'MY.infraRankSsp'
    | 'MY.infraRankVar'
    | 'MY.infraRankBeta'
    | 'MY.infraRankB'
    | 'MY.infraRankForma'
    | 'MY.infraRankHybrid'
    | 'MY.infraRankAnamorph'
    | 'MY.infraRankAggregate'
    | 'MY.infraRankAberration'
    | 'MY.infraRankCultivar'
    | 'MY.infraRankMorpha'
    | 'MY.infraRankUnknown'
    | 'MY.infraRankNothosubspecies'
    | 'MY.infraRankCultivarGroup';
  export const InfraRankEnum = {
    InfraRankSsp: 'MY.infraRankSsp' as InfraRankEnum,
    InfraRankVar: 'MY.infraRankVar' as InfraRankEnum,
    InfraRankBeta: 'MY.infraRankBeta' as InfraRankEnum,
    InfraRankB: 'MY.infraRankB' as InfraRankEnum,
    InfraRankForma: 'MY.infraRankForma' as InfraRankEnum,
    InfraRankHybrid: 'MY.infraRankHybrid' as InfraRankEnum,
    InfraRankAnamorph: 'MY.infraRankAnamorph' as InfraRankEnum,
    InfraRankAggregate: 'MY.infraRankAggregate' as InfraRankEnum,
    InfraRankAberration: 'MY.infraRankAberration' as InfraRankEnum,
    InfraRankCultivar: 'MY.infraRankCultivar' as InfraRankEnum,
    InfraRankMorpha: 'MY.infraRankMorpha' as InfraRankEnum,
    InfraRankUnknown: 'MY.infraRankUnknown' as InfraRankEnum,
    InfraRankNothosubspecies: 'MY.infraRankNothosubspecies' as InfraRankEnum,
    InfraRankCultivarGroup: 'MY.infraRankCultivarGroup' as InfraRankEnum
  };
  export type PublicityRestrictionsEnum =
    'MZ.publicityRestrictionsPublic'
    | 'MZ.publicityRestrictionsProtected'
    | 'MZ.publicityRestrictionsPrivate';
  export const PublicityRestrictionsEnum = {
    PublicityRestrictionsPublic: 'MZ.publicityRestrictionsPublic' as PublicityRestrictionsEnum,
    PublicityRestrictionsProtected: 'MZ.publicityRestrictionsProtected' as PublicityRestrictionsEnum,
    PublicityRestrictionsPrivate: 'MZ.publicityRestrictionsPrivate' as PublicityRestrictionsEnum
  };
}
