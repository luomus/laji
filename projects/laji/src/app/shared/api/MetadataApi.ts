'use strict';

/* eslint-disable */
/**
 * API documentation
 * To use this api you need an access token. To getList the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: TEST This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { PagedResult } from '../model/PagedResult';
import { HttpClient } from '@angular/common/http';
import { Util } from '../service/util.service';
import { Metadata } from '../model/Metadata';
import { Property } from '../model/Property';
import { environment } from '../../../environments/environment';

@Injectable({providedIn: 'root'})
export class MetadataApi {
  protected basePath = environment.apiBase;

  constructor(protected http: HttpClient) {
  }

  /**
   * Returns info about all the classes
   *
   * @param lang
   */
  public metadataAllClasses(lang?: string, extraHttpRequestParams?: any): Observable<PagedResult<Metadata>> {
    const path = this.basePath + '/metadata/classes';

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get<PagedResult<Metadata>>(path, {params: queryParameters});
  }

  /**
   * Returns info about all the properties
   *
   * @param lang
   */
  public metadataAllProperties(lang?: string, extraHttpRequestParams?: any): Observable<PagedResult<Property>> {
    const path = this.basePath + '/metadata/properties';

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get<PagedResult<Property>>(path, {params: queryParameters});
  }

  /**
   * Returns all ranges that are of select (alt) type
   *
   * @param lang
   * @param asLookupObject return select values as key value object instead of a list
   */
  public metadataFindAllRanges(lang?: string, asLookupObject?: boolean, extraHttpRequestParams?: any): Observable<any> {
    const path = this.basePath + '/metadata/ranges';

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    if (asLookupObject !== undefined) {
      queryParameters['asLookupObject'] = asLookupObject;
    }

    return this.http.get(path, {params: queryParameters});
  }

  /**
   * Returns info about the class
   *
   * @param _class
   * @param lang
   */
  public metadataFindClass(_class: string, lang?: string, extraHttpRequestParams?: any): Observable<Metadata> {
    const path = this.basePath + '/metadata/classes/{class}'
        .replace('{' + 'class' + '}', String(_class));

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    // verify required parameter '_class' is not null or undefined
    if (_class === null || _class === undefined) {
      throw new Error('Required parameter _class was null or undefined when calling metadataFindClass.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get(path, {params: queryParameters});
  }

  /**
   * Returns info all classes properties
   *
   * @param _class
   * @param lang
   */
  public metadataFindClassProperties(_class: string, lang?: string, extraHttpRequestParams?: any): Observable<any> {
    const path = this.basePath + '/metadata/classes/{class}/properties'
        .replace('{' + 'class' + '}', String(_class));

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    // verify required parameter '_class' is not null or undefined
    if (_class === null || _class === undefined) {
      throw new Error('Required parameter _class was null or undefined when calling metadataFindClassProperties.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get(path, {params: queryParameters});
  }

  /**
   * Returns classes properties with key values of ranges used that are of select (alt) type
   *
   * @param _class
   * @param lang
   * @param asLookupObject return select values as key value object instead of a list
   */
  public metadataFindClassRanges(_class: string, lang?: string, asLookupObject?: boolean, extraHttpRequestParams?: any): Observable<any> {
    const path = this.basePath + '/metadata/classes/{class}/ranges'
        .replace('{' + 'class' + '}', String(_class));

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    // verify required parameter '_class' is not null or undefined
    if (_class === null || _class === undefined) {
      throw new Error('Required parameter _class was null or undefined when calling metadataFindClassRanges.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    if (asLookupObject !== undefined) {
      queryParameters['asLookupObject'] = asLookupObject;
    }

    return this.http.get(path, {params: queryParameters});
  }

  /**
   * Returns key value list of properties range that are of select (alt) type
   *
   * @param property
   * @param lang
   * @param asLookupObject return select values as key value object instead of a list
   * @param classTypeAsList Try to intemperate class types as list instead of string.
   */
  public metadataFindPropertiesRanges(property: string, lang?: string, asLookupObject?: boolean, classTypeAsList?: boolean, extraHttpRequestParams?: any): Observable<any> {
    const path = this.basePath + '/metadata/properties/{property}/ranges'
        .replace('{' + 'property' + '}', String(property));

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    // verify required parameter 'property' is not null or undefined
    if (property === null || property === undefined) {
      throw new Error('Required parameter property was null or undefined when calling metadataFindPropertiesRanges.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    if (asLookupObject !== undefined) {
      queryParameters['asLookupObject'] = asLookupObject;
    }

    if (classTypeAsList !== undefined) {
      queryParameters['classTypeAsList'] = classTypeAsList;
    }

    return this.http.get(path, {params: queryParameters});
  }

  /**
   * Returns info about all the properties
   *
   * @param property
   * @param lang
   */
  public metadataFindProperty(property: string, lang?: string, extraHttpRequestParams?: any): Observable<Property> {
    const path = this.basePath + '/metadata/properties/{property}'
        .replace('{' + 'property' + '}', String(property));

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    // verify required parameter 'property' is not null or undefined
    if (property === null || property === undefined) {
      throw new Error('Required parameter property was null or undefined when calling metadataFindProperty.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get<Property>(path, {params: queryParameters});
  }

  /**
   * Returns range that is of type select (alt)
   *
   * @param range
   * @param lang
   * @param asLookupObject return select values as key value object instead of a list
   */
  public metadataFindRange(range: string, lang?: string, asLookupObject?: boolean, extraHttpRequestParams?: any): Observable<any> {
    const path = this.basePath + '/metadata/ranges/{range}'
        .replace('{' + 'range' + '}', String(range));

    const queryParameters = {...Util.removeFromObject(extraHttpRequestParams)};
    // verify required parameter 'range' is not null or undefined
    if (range === null || range === undefined) {
      throw new Error('Required parameter range was null or undefined when calling metadataFindRange.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    if (asLookupObject !== undefined) {
      queryParameters['asLookupObject'] = asLookupObject;
    }

    return this.http.get(path, {params: queryParameters});
  }

}
