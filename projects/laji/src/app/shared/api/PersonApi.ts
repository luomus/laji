/* eslint-disable no-unused-vars, max-len */
/**
 * API documentation
 * To use this api you need an access token. To getList the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: TEST This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { EMPTY, Observable } from 'rxjs';
import { HttpClient, HttpResponse } from '@angular/common/http';
import { Profile } from '../model/Profile';
import { Person } from '../model/Person';
import { environment } from '../../../environments/environment';
import { PlatformService } from '../../root/platform.service';

@Injectable({providedIn: 'root'})
export class PersonApi {
  protected basePath = environment.apiBase;

  constructor(
    private platformService: PlatformService,
    protected http: HttpClient
  ) {
  }

  /**
   * Accept person request
   *
   * @param token User token
   * @param userId Accept this user as a person
   */
  public personAcceptFriendRequest(token: string, userId: string): Observable<Profile> {
    if (this.platformService.isServer) {
      return EMPTY;
    }
    return this.http.put<Profile>(`${this.basePath}/person/${token}/friends/${userId}`, undefined);
  }

  /**
   * Request person to be your friend
   *
   * @param token User token
   * @param friendPersonID Friend's person ID who is asked be your friend
   */
  public personAddFriendRequest(token: string, friendPersonID: string): Observable<unknown> {
    if (this.platformService.isServer) {
      return EMPTY;
    }

    return this.http.post(`${this.basePath}/person/${token}/friends/${friendPersonID}`, undefined);
  }

  /**
   * Create profile
   *
   * @param profile object to be updated
   * @param token users personToken
   */
  public personCreateProfileByToken(profile: Profile, token: string): Observable<Profile> {
    if (this.platformService.isServer) {
      return EMPTY;
    }
    return this.http.post<Profile>(`${this.basePath}/person/${token}/profile`, profile);
  }

  /**
   * Find person by user token
   *
   * @param token users personToken
   */
  public personFindByToken(token: string): Observable<Person> {
    if (this.platformService.isServer) {
      return EMPTY;
    }
    return this.http.get(`${this.basePath}/person/${token}`);
  }

  /**
   * Find person by user id
   *
   * @param id users id
   */
  public personFindByUserId(id: string): Observable<Person> {
    return this.http.get(`${this.basePath}/person/by-id/${id}`);
  }

  /**
   * Find persons profile by user id
   *
   * @param id users id
   */
  public personFindProfileByUserId(id: string): Observable<Profile> {
    return this.http.get(`${this.basePath}/person/by-id/${id}/profile`);
  }

  /**
   * Show persons profile
   *
   * @param token users personToken
   */
  public personFindProfileByToken(token: string): Observable<Profile> {
    if (this.platformService.isServer) {
      return EMPTY;
    }
    return this.http.get(`${this.basePath}/person/${token}/profile`);
  }

  /**
   * Remove person request or person
   *
   * @param token User token
   * @param userId Accept this user as a person
   * @param block if the removed person should be blocked also
   */
  public personRemoveFriend(token: string, userId: string, block: boolean = false): Observable<Profile> {
    if (this.platformService.isServer) {
      return EMPTY;
    }
    return this.http.delete(`${this.basePath}/person/${token}/friends/${userId}`, {params: { block }});
  }

  /**
   * Update profile
   *
   * @param profile users profile object
   * @param token users personToken
   */
  public personUpdateProfileByToken(profile: Profile, token: string): Observable<Profile> {
    if (this.platformService.isServer) {
      return EMPTY;
    }
    return this.http.put(`${this.basePath}/person/${token}/profile`, profile);
  }

  public removePersonToken(token: string) {
    if (this.platformService.isServer) {
      return EMPTY;
    }
    const url = `${this.basePath}/person-token/${token}`;
    return this.http.delete(url, {observe: 'body', responseType: 'text'});
  }

  public existsByEmail(email: string): Observable<HttpResponse<void>> {
    return this.http.get<void>(`${this.basePath}/person/exists-by-email/${email}`, { observe: 'response' });
  }
}
