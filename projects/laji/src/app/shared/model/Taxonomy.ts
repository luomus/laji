/**
 * API documentation
 * To use this api you need an access token. To getList the token, send a post
 * request with your email address to api-users resource and one will be send to your.
 * See below for information on how to use this api and if you have any questions you
 * can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/)
 * for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';

import { MultiLanguage } from './MultiLanguage';

export interface Taxonomy {

  id?: string;

  distributionMapFinland?: string;

  sortOrder?: number;

  checklist?: string[];

  redListStatus2000Finland?: string;

  redListStatus2010Finland?: string;

  redListStatus2015Finland?: string;

  winteringSecureLevel?: string;

  typeOfOccurrenceInFinlandNotes?: string;

  typeOfOccurrenceInFinland?: Array<string>;

  tradeName?: Array<string>;

  taxonomyText?: string;

  reproduction?: string;

  originalPublications?: Array<string>;

  occurrenceInFinlandPublications?: Array<string>;

  /**
   *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
   */
  obsoleteVernacularName?: Array<string>;

  colloquialVernacularName?: Array<string>;

  notes?: string;

  nestSiteSecureLevel?: string;

  naturaAreaSecureLevel?: string;

  nameDecidedDate?: Date;

  nameDecidedBy?: string;

  misappliedNameNotes?: string;

  isPartOfInformalTaxonGroup?: Array<string>;

  invasiveSpeciesEstablishment?: string;

  invasiveSpeciesCategory?: string;

  invasivePreventionMethodsText?: string;

  invasiveEffectText?: string;

  invasiveCitizenActionsText?: string;

  ingressText?: string;

  hasAdminStatus?: Array<string>;

  externalLinkURL?: string;

  euringNumber?: number;

  euringCode?: string;

  etymologyText?: string;

  customReportFormLink?: string;

  circumscription?: string;

  breedingSecureLevel?: string;

  birdlifeCode?: string;

  alsoKnownAs?: Array<string>;

  taxonRank?: string;

  isPartOf?: string;

  scientificName?: string;

  scientificNameAuthorship?: string;

  nameAccordingTo?: string;

  habitatOccurrenceCounts?: Array<any>;

  /**
   *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
   */
  vernacularName?: string;

  misappliedName?: Array<string>;

  occurrenceInFinland?: string;

  checklistStatus?: string;

  higherTaxaStatus?: boolean;

  finnishSpeciesTaggingStatus?: boolean;

  taxonExpert?: Array<string>;

  taxonEditor?: Array<string>;

  secureLevel?: string;

  informalTaxonGroups?: Array<string>;

  occurrences?: Array<Occurrence>;

  synonymOf?: Taxonomy;

  synonymNames?: string;

  misappliedListNames?: string;

  synonyms?: Array<Taxonomy>;

  basionyms?: Array<Taxonomy>;

  heterotypicSynonyms?: Array<Taxonomy>;

  homotypicSynonyms?: Array<Taxonomy>;

  objectiveSynonyms?: Array<Taxonomy>;

  orthographicVariants?: Array<Taxonomy>;

  subjectiveSynonyms?: Array<Taxonomy>;

  children?: Array<Taxonomy>;

  administrativeStatuses?: Array<string>;

  species?: boolean;

  invasiveSpecies?: boolean;

  /**
   * should the name appear cursive
   */
  cursiveName?: boolean;

  countOfSpecies?: number;

  countOfFinnishSpecies?: number;

  /**
   * is taxon species or subspecies or etc and occurs in Finland
   */
  finnishSpecies?: boolean;

  /**
   * taxon occurs in Finland
   */
  finnish?: boolean;

  /**
   * stable in Finland
   */
  stableInFinland?: boolean;

  expertChangesFromParent?: boolean;

  /**
   * sort order for taxonomic sorting
   */
  taxonomicSortOrder?: number;

  hasBold?: boolean;

  /**
   * true if has parents
   */
  hasParent?: boolean;

  /**
   * true if has children
   */
  hasChildren?: boolean;

  latestRedListStatusFinland?: LatestRedListStatusFinland;

  redListStatusesInFinland?: LatestRedListStatusFinland[];

  redListEvaluationGroups?: string[];

  multimedia?: TaxonomyImage[];

  descriptions?: any[];

  taxonConceptIds?: string[];

  additionalIds?: string[];

  redListEvaluation?: {[year: string]: RedListEvaluation};

  latestRedListEvaluation?: RedListEvaluation;

  alternativeVernacularName?: string[];

  misspelledNames?: string[];

  misappliedNames?: string[];

  primaryHabitat?: Habitat;

  secondaryHabitats?: Habitat[];

  parent?: any;

  occurrenceInFinlandSpecimenURI?: string;

  typeSpecimenURI?: string;

  hasLatestRedListEvaluation?: boolean;

  nonHiddenParentsIncludeSelf?: string[];

  observationCount?: number;

  observationCountFinland?: number;

  bold?: Bold;
}

export interface RedListEvaluation {
  reasonForStatusChange?: string;
  evaluationYear?: string;
  redListStatus?: string;
  criteriaForStatus?: string;
  externalPopulationImpactOnRedListStatus?: string;
  possiblyRE?: Record<string, unknown>;
  primaryHabitat?: Habitat;
  secondaryHabitats?: Habitat[];
  endangermentReasons?: string[];
  primaryThreat?: string;
  threats?: string[];
  occurrences?: Occurrence[];
  lastSightingNotes?: string;
  threatenedAtArea?: string[];
}

export interface LatestRedListStatusFinland {
  status: string;
  year: number;
}

export interface TaxonomyDescriptionVariable {

  variable: string;

  title?: string;

  content?: string;

}

export interface TaxonomyDescriptionGroup {

  group: string;

  title?: string;

  variables?: Array<TaxonomyDescriptionVariable>;

}

export interface TaxonomyDescription {

  id?: string;

  title?: string;

  groups?: Array<TaxonomyDescriptionGroup>;

  speciesCardAuthors?: TaxonomyDescriptionVariable;

}

export interface TaxonomyImage {
  author?: string;
  copyrightOwner?: string;
  largeURL?: string;
  fullURL?: string;
  keywords?: string[];
  licenseId?: string;
  licenseAbbreviation?: string;
  licenseDescription?: string;
  source?: string;
  taxonDescriptionCaption?: MultiLanguage;
  thumbnailURL?: string;
}

export interface  Habitat {

  habitat: string;

  habitatSpecificTypes?: string[];

  id: string;

  order: number;

}

export interface Occurrence {

  area: string;

  notes?: string;

  specimenURI?: string;

  status: string;

  year?: number;

}

export interface Bold {

  publicRecords?: number;

  specimens?: number;

  barcodes?: number;

  bins?: string[];

  binCount?: number;
}
