/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */


export interface paths {
  "/forms/permissions": {
    /** @description Get form permissions for a person */
    get: operations["getPermissions"];
  };
  "/forms/permissions/{collectionID}": {
    /** @description Get form permissions for a person */
    get: operations["getPermissionsByCollectionID"];
    /** @description Request access to form */
    post: operations["requestAccess"];
  };
  "/forms/permissions/{collectionID}/{personID}": {
    /** @description Accept access to form */
    put: operations["acceptAccess"];
    /** @description Remove access to form */
    delete: operations["revokeAccess"];
  };
  "/forms": {
    /** @description Get all forms */
    get: operations["getPage"];
    /** @description Create a new form */
    post: operations["create"];
  };
  "/forms/{id}": {
    /** @description Get a form by id */
    get: operations["findOne"];
    /** @description Update an existing form */
    put: operations["update"];
    /** @description Delete a form */
    delete: operations["remove"];
  };
  "/forms/transform": {
    /** @description Get preview of form transformed from json format to schema format */
    post: operations["transform"];
  };
  "/person/{personToken}": {
    /** @description Find person by person token */
    get: operations["findPersonByToken"];
  };
  "/person/{personToken}/profile": {
    get: operations["findProfileByPersonToken"];
    /** @description Update profile */
    put: operations["updateProfile"];
    /** @description Create profile */
    post: operations["createProfile"];
  };
  "/person/by-id/{personId}": {
    /** @description Find person by user id (this will not include email) */
    get: operations["findPersonByPersonId"];
  };
  "/person/by-id/{personId}/profile": {
    /** @description Find profile by user id (this will only return small subset of the full profile) */
    get: operations["getProfileByPersonId"];
  };
  "/person/{personToken}/friends/{profileKey}": {
    /** @description Request person to be your friend */
    post: operations["addFriendRequest"];
  };
  "/person/{personToken}/friends/{personId}": {
    /** @description Accept friend request */
    put: operations["acceptFriendRequest"];
    /** @description Remove a friend request or a friend */
    delete: operations["removeFriend"];
  };
  "/person-token/{personToken}": {
    /** @description Returns information about the token */
    get: operations["getInfo"];
    /** @description Deletes the token */
    delete: operations["delete"];
  };
  "/notifications/{personToken}": {
    /** @description Get notifications */
    get: operations["findAll"];
  };
  "/notifications/{id}": {
    /** @description Update notification */
    put: operations["update"];
    /** @description Delete notification */
    delete: operations["delete"];
  };
  "/collections": {
    /** @description Get all collections */
    get: operations["getAll"];
  };
  "/collections/roots": {
    /** @description Get all root collections */
    get: operations["findRoots"];
  };
  "/collections/{id}": {
    /** @description Get collection by id */
    get: operations["findOne"];
  };
  "/collections/{id}/children": {
    /** @description Get child collections */
    get: operations["findChildren"];
  };
  "/api-users": {
    /** @description Returns info about user based on the access token */
    get: operations["getInfo"];
    /** @description Register as an api user (access token will be sent to your email) */
    post: operations["register"];
  };
  "/api-users/renew": {
    /** @description Requests new access token (will be sent to your email). Please note that this will not delete any existing tokens. */
    post: operations["renew"];
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    FormPermissionPersonDto: {
      personID: string;
      /** @description List of collection IDs that the person has admin permission to */
      admins: string[];
      /** @description List of collection IDs that the person has edit permission to */
      editors: string[];
      /** @description List of collection IDs that the person has requested permission for */
      permissionRequests: string[];
    };
    FormPermissionDto: {
      "@context"?: string;
      id?: string;
      "@type"?: string;
      /** @description List of person IDs with admin permissions */
      admins: string[];
      /** @description List of person IDs with edit permissions */
      editors: string[];
      /** @description List of person IDs requesting permission to form */
      permissionRequests: string[];
      collectionID: string;
    };
    Person: {
      id: string;
      emailAddress: string;
      inheritedName?: string;
      preferredName?: string;
      lajiAuthLoginName?: string;
      fullName?: string;
      /** @enum {string} */
      role?: "MA.admin";
      group?: string;
      organisation?: string[];
      organisationAdmin?: string[];
      securePortalUserRoleExpires?: string;
      "@context": string;
    };
    Profile: {
      id: string;
      profileKey: string;
      userID: string;
      profileDescription: string;
      personalCollectionIdentifier: string;
      /** @default [] */
      taxonExpertise: string[];
      taxonExpertiseNotes: string;
      image: string;
      /** @default [] */
      friends: string[];
      /** @default [] */
      blocked: string[];
      /** @default [] */
      friendRequests: string[];
      /** @default {} */
      settings: Record<string, never>;
    };
    Notification: {
      id: string;
      seen: boolean;
      created: string;
      toPerson: string;
      friendRequest?: string;
      friendRequestAccepted?: string;
    };
    ApiUser: {
      id: number;
      email: string;
      systemID?: string;
      feedbackEmail?: string;
      /** @default noop */
      password: string;
    };
    ApiUserCreateDto: {
      email: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export interface operations {

  /** @description Get form permissions for a person */
  getPermissions: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormPermissionPersonDto"];
        };
      };
    };
  };
  /** @description Get form permissions for a person */
  getPermissionsByCollectionID: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
      };
      path: {
        collectionID: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormPermissionDto"];
        };
      };
    };
  };
  /** @description Request access to form */
  requestAccess: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
      };
      path: {
        collectionID: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["FormPermissionDto"];
        };
      };
    };
  };
  /** @description Accept access to form */
  acceptAccess: {
    parameters: {
      query: {
        /** @description Person token who is authorised to accept requests */
        personToken: string;
      };
      path: {
        collectionID: string;
        personID: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormPermissionDto"];
        };
      };
    };
  };
  /** @description Remove access to form */
  revokeAccess: {
    parameters: {
      query: {
        /** @description Person token who is authorised to accept requests */
        personToken: string;
      };
      path: {
        collectionID: string;
        personID: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["FormPermissionDto"];
        };
      };
    };
  };
  /** @description Get all forms */
  getPage: {
    parameters: {
      query?: {
        lang?: "fi" | "sv" | "en" | "multi";
        pageSize?: number;
        page?: number;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>[];
        };
      };
    };
  };
  /** @description Create a new form */
  create: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** @description Get collection by id */
  findOne: {
    parameters: {
      query?: {
        lang?: "fi" | "sv" | "en" | "multi";
        langFallback?: boolean;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** @description Update notification */
  update: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
      };
      path: {
        id: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Notification"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Notification"];
        };
      };
    };
  };
  /** @description Delete a form */
  remove: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** @description Get preview of form transformed from json format to schema format */
  transform: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
        /** @description Language of fields that have multiple languages. If multi is selected fields that can have multiple languages will contain language objects. Defaults to 'en' */
        lang?: "fi" | "sv" | "en" | "multi";
      };
    };
    responses: {
      201: {
        content: {
          "application/json": Record<string, never>;
        };
      };
    };
  };
  /** @description Find person by person token */
  findPersonByToken: {
    parameters: {
      path: {
        personToken: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  findProfileByPersonToken: {
    parameters: {
      path: {
        personToken: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Update profile */
  updateProfile: {
    parameters: {
      path: {
        personToken: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Profile"];
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Create profile */
  createProfile: {
    parameters: {
      path: {
        personToken: string;
      };
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["Profile"];
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Find person by user id (this will not include email) */
  findPersonByPersonId: {
    parameters: {
      path: {
        personId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Person"];
        };
      };
    };
  };
  /** @description Find profile by user id (this will only return small subset of the full profile) */
  getProfileByPersonId: {
    parameters: {
      path: {
        personId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Request person to be your friend */
  addFriendRequest: {
    parameters: {
      path: {
        personToken: string;
        profileKey: string;
      };
    };
    responses: {
      201: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Accept friend request */
  acceptFriendRequest: {
    parameters: {
      path: {
        personToken: string;
        personId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Remove a friend request or a friend */
  removeFriend: {
    parameters: {
      query: {
        block: boolean;
      };
      path: {
        personToken: string;
        personId: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["Profile"];
        };
      };
    };
  };
  /** @description Returns info about user based on the access token */
  getInfo: {
    parameters: {
      query?: {
        /** @description access token which to return information from */
        accessToken?: string;
      };
    };
    responses: {
      200: {
        content: {
          "application/json": components["schemas"]["ApiUser"];
        };
      };
    };
  };
  /** @description Delete notification */
  delete: {
    parameters: {
      query: {
        /** @description Person's authentication token */
        personToken: string;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** @description Get notifications */
  findAll: {
    parameters: {
      query?: {
        /** @description Return only notifications that have not been marked as seen. */
        onlyUnSeen?: boolean;
        page?: number;
        pageSize?: number;
        lang?: "fi" | "sv" | "en" | "multi";
      };
      path: {
        personToken: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** @description Get all collections */
  getAll: {
    parameters: {
      query?: {
        /** @description Comma separated ids */
        idIn?: string;
        page?: number;
        pageSize?: number;
        lang?: "fi" | "sv" | "en" | "multi";
        langFallback?: boolean;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** @description Get all root collections */
  findRoots: {
    parameters: {
      query?: {
        lang?: "fi" | "sv" | "en" | "multi";
        langFallback?: boolean;
        page?: number;
        pageSize?: number;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** @description Get child collections */
  findChildren: {
    parameters: {
      query?: {
        lang?: "fi" | "sv" | "en" | "multi";
        langFallback?: boolean;
        page?: number;
        pageSize?: number;
      };
      path: {
        id: string;
      };
    };
    responses: {
      200: {
        content: never;
      };
    };
  };
  /** @description Register as an api user (access token will be sent to your email) */
  register: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApiUserCreateDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
  /** @description Requests new access token (will be sent to your email). Please note that this will not delete any existing tokens. */
  renew: {
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApiUserCreateDto"];
      };
    };
    responses: {
      201: {
        content: never;
      };
    };
  };
}
