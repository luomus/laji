/**
 * API documentation
 * To use this api you need an access token.  To get the token, send a post request with your email
 * address to api-users resource and one will be send to your. Each endpoint bellow has more information on
 * how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.
 * You can find more documentation here: [in Finnish](https://laji.fi/about/806)
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import { Injectable } from '@angular/core';
import {
  Headers,
  Http,
  RequestMethod,
  RequestOptions,
  RequestOptionsArgs,
  Response,
  URLSearchParams
} from '@angular/http';

import { Observable } from 'rxjs/Observable';
import { Annotation } from '../model/Annotation';
import { PagedResult } from '../model/PagedResult';

/* tslint:disable:no-unused-variable member-ordering */


@Injectable()
export class AnnotationApi {
  protected basePath = '/api';
  public defaultHeaders: Headers = new Headers();

  constructor(protected http: Http) {
  }

  /**
   * Create a new annotation and persist it
   *
   * @param data Model instance data
   * @param personToken Persons authentication token
   */
  public createAnnotation(data: Annotation, personToken?: string, extraHttpRequestParams?: any): Observable<Annotation> {
    return this.createAnnotationWithHttpInfo(data, personToken, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Deletes existing annotation
   *
   * @param id Id for the annotation
   * @param personToken Persons authentication token
   */
  public deleteAnnotation(id: string, personToken?: string, extraHttpRequestParams?: any): Observable<Annotation> {
    return this.deleteAnnotationWithHttpInfo(id, personToken, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Find a annotation with id
   *
   * @param id Find document with the id
   */
  public findAnnotationById(id: string, extraHttpRequestParams?: any): Observable<Annotation> {
    return this.findAnnotationByIdWithHttpInfo(id, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Get all annotations
   *
   * @param page Page number
   * @param pageSize Page size
   * @param rootID Filter by document ID
   */
  public findAnnotations(
    page?: string,
    pageSize?: string,
    rootID?: string,
    extraHttpRequestParams?: any
  ): Observable<PagedResult<Annotation>> {
    return this.findAnnotationsWithHttpInfo(page, pageSize, rootID, extraHttpRequestParams)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }


  /**
   * Create a new annotation and persist it
   *
   * @param data Model instance data
   * @param personToken Persons authentication token
   */
  public createAnnotationWithHttpInfo(
    data: Annotation,
    personToken?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/annotations`;

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'data' is not null or undefined
    if (data === null || data === undefined) {
      throw new Error('Required parameter data was null or undefined when calling annotationCreateAnnotation.');
    }
    if (personToken !== undefined) {
      queryParameters.set('personToken', <any>personToken);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    headers.set('Content-Type', 'application/json');

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Post,
      headers: headers,
      body: data == null ? '' : JSON.stringify(data), // https://github.com/angular/angular/issues/10612
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Deletes existing annotation
   *
   * @param id Id for the annotation
   * @param personToken Persons authentication token
   */
  public deleteAnnotationWithHttpInfo(id: string, personToken?: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/annotations/${id}`;

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling annotationDeleteAnnotation.');
    }
    if (personToken !== undefined) {
      queryParameters.set('personToken', <any>personToken);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Delete,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Find a annotation with id
   *
   * @param id Find document with the id
   */
  public findAnnotationByIdWithHttpInfo(id: string, extraHttpRequestParams?: any): Observable<Response> {
    const path = this.basePath + `/annotations/${id}`;

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling annotationFindAnnotationById.');
    }
    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

  /**
   * Get all annotations
   *
   * @param page Page number
   * @param pageSize Page size
   * @param rootID Filter by document ID
   */
  public findAnnotationsWithHttpInfo(
    page?: string,
    pageSize?: string,
    rootID?: string,
    extraHttpRequestParams?: any
  ): Observable<Response> {
    const path = this.basePath + `/annotations`;

    const queryParameters = new URLSearchParams();
    const headers = new Headers(this.defaultHeaders.toJSON()); // https://github.com/angular/angular/issues/6845
    if (page !== undefined) {
      queryParameters.set('page', <any>page);
    }

    if (pageSize !== undefined) {
      queryParameters.set('pageSize', <any>pageSize);
    }

    if (rootID !== undefined) {
      queryParameters.set('rootID', <any>rootID);
    }

    // to determine the Content-Type header
    const consumes: string[] = [
      'application/json'
    ];

    // to determine the Accept header
    const produces: string[] = [
      'application/json'
    ];

    let requestOptions: RequestOptionsArgs = new RequestOptions({
      method: RequestMethod.Get,
      headers: headers,
      search: queryParameters
    });

    // https://github.com/swagger-api/swagger-codegen/issues/4037
    if (extraHttpRequestParams) {
      requestOptions = (<any>Object).assign(requestOptions, extraHttpRequestParams);
    }

    return this.http.request(path, requestOptions);
  }

}
