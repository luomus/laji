/* tslint:disable:no-unused-variable member-ordering */
/**
 * API documentation
 * To use this api you need an access token. To getList the token, send a post request with your email address to
 * api-users resource and one will be send to your. See below for information on how to use this api and
 * if you have any questions you can contact us at helpdesk@laji.fi.
 * Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: TEST This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Log, Status } from '../model/Log';
import { HttpClient } from '@angular/common/http';
import { Util } from '../service/util.service';

@Injectable()
export class LoggerApi {
  protected basePath = '/api';

  constructor(protected http: HttpClient) {
  }

  protected serializer() {
    const stack = [], keys = [];

    const cycleReplacer = function(key, value) {
      if (stack[0] === value) {
        return '[Circular ~]';
      }
      return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';
    };

    return function(key, value) {
      if (stack.length > 0) {
        const thisPos = stack.indexOf(this);
        if (thisPos > -1) {
          stack.splice(thisPos + 1);
          keys.splice(thisPos, Infinity, key);
        } else {
          stack.push(this);
          keys.push(key);
        }
        if (stack.indexOf(value) > -1) {
          value = cycleReplacer.call(this, key, value);
        }
      } else {
        stack.push(value);
      }

      return value;
    }
  }

  /**
   * Send error level log msg
   *
   * @param data Model instance data
   */
  public logError (data?: Log, extraHttpRequestParams?: any ): Observable<{}> {
    const path = this.basePath + '/logger/error';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};

    return this.http.post(path, JSON.stringify(data, this.serializer()), {params: queryParameters});
  }

  /**
   * Send info level log msg
   *
   * @param data Model instance data
   */
  public logInfo (data?: Log, extraHttpRequestParams?: any ): Observable<{}> {
    const path = this.basePath + '/logger/info';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};

    return this.http.post(path, JSON.stringify(data, this.serializer()), {params: queryParameters});
  }

  /**
   * Send error level log msg
   *
   * @param minutesBack How many minutes back to look for items in the log
   */
  public logStatus (minutesBack?: number, extraHttpRequestParams?: any ): Observable<Status> {
    const path = this.basePath + '/logger/status';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    if (minutesBack !== undefined) {
      queryParameters['minutesBack'] = '' + minutesBack;
    }

    return this.http.get<Status>(path, {params: queryParameters});
  }

  /**
   * Send warn level log msg
   *
   * @param data Model instance data
   */
  public logWarn (data?: Log, extraHttpRequestParams?: any ): Observable<{}> {
    const path = this.basePath + '/logger/warn';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};

    return this.http.post(path, JSON.stringify(data, this.serializer()), {params: queryParameters});
  }

}
