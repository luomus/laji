/**
 * API documentation
 * To use this api you need an access token.  To getList the token, send a post request with your email address to api-users resource and one will be send to your. Each endpoint bellow has more information on how to use this API. If you have any questions you can contact us at helpdesk@laji.fi.  You can find more documentation here: [in Finnish](https://laji.fi/about/806), in English (todo). Please refer to [schema.laji.fi](http://schema.laji.fi/) for information about the used vocabulary.  ##Endpoints  Observations and collections * Warehouse - Warehouse API * Collection - Collection metadata * Source - Information sources (IT systems) * Annotation - Quality control   Taxonomy * Taxa - Taxonomy API * InformalTaxonGroup - Informal taxon groups are used in taxa and warehouse endpoints * Publication - Scientific publications * Checklist - Mainly you only work with one checklits: the FinBIF master checklist. There are others.   Other master data * Metadata - Variable descriptions * Area - Countries, municipalities and biogeographical provinces of Finland, etc. * Person - Information about people.   Helpers * APIUser - Register as an API user * Autocomplete - For making an autocomplete filed for taxa, collections or persons (friends) * PersonToken - Information about an authorized person   Vihko observation system * Form - Form definition * Document - Document instance of a form * Image - Image of a document   Laji.fi portal * Feedback - Feedback form API * Information - CMS content of information pages * Logger - Error logging from user's browsers to FinBIF * News - News
 *
 * OpenAPI spec version: 0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import {Publication} from '../model/Publication';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable()
export class PublicationApi {
  protected basePath = '/api';
  public defaultHeaders: Headers = new Headers();

  constructor(protected http: Http) {
  }

  /**
   * Get all Publications
   *
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   * @param langFallback Weather or not fallback to other languages if no data found in the asked language
   * @param idIn Include only items with there ids. Multiple values are separated by a comma (,)
   * @param page Page number
   * @param pageSize Page size
   */
  public publicationFind (lang?: string, langFallback?: boolean, idIn?: string, page?: string, pageSize?: string, extraHttpRequestParams?: any ): Observable<Array<Publication>> {
    const path = this.basePath + '/publications';

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    if (lang !== undefined) {
      queryParameters.set('lang', lang);
    }

    if (langFallback !== undefined) {
      queryParameters.set('langFallback', langFallback ? 'true' : 'false');
    }

    if (idIn !== undefined) {
      queryParameters.set('idIn', idIn);
    }

    if (page !== undefined) {
      queryParameters.set('page', page);
    }

    if (pageSize !== undefined) {
      queryParameters.set('pageSize', pageSize);
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

  /**
   * Find Publication by id
   *
   * @param id
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   * @param langFallback Weather or not fallback to other languages if no data found in the asked language
   */
  public publicationFindById (id: string, lang?: string, langFallback?: boolean, extraHttpRequestParams?: any ): Observable<Publication> {
    const path = this.basePath + '/publications/{id}'
        .replace('{' + 'id' + '}', String(id));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling publicationFindById.');
    }
    if (lang !== undefined) {
      queryParameters.set('lang', lang);
    }

    if (langFallback !== undefined) {
      queryParameters.set('langFallback', langFallback ? 'true' : 'false');
    }

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

}
