/* tslint:disable */
/**
 * API documentation
 * To use this api you need an access token. To getList the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: TEST This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { PagedResult } from '../model/PagedResult';
import { NamedPlace } from '../model/NamedPlace';
import { HttpClient } from '@angular/common/http';
import { Util } from '../service/util.service';
import { environment } from '../../../environments/environment';

export interface NamedPlaceQuery {
  userToken?: string;
  collectionID?: string;
  alternativeIDs?: string;
  municipality?: string;
  taxonIDs?: string;
  birdAssociationArea?: string;
  tags?: string;
  includePublic?: boolean;
  includeUnits?: boolean;
  selectedFields?: string;
}

@Injectable({providedIn: 'root'})
export class NamedPlaceApi {
  protected basePath = environment.apiBase;

  constructor(protected http: HttpClient) {
  }

  /**
   * Create a new document and persist it
   *
   * @param data Model instance data
   * @param userToken User authentication token
   */
  public create(data: NamedPlace, userToken: string, extraHttpRequestParams?: any): Observable<NamedPlace> {
    const path = this.basePath + '/named-places';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'data' is not null or undefined
    if (data === null || data === undefined) {
      throw new Error('Required parameter data was null or undefined when calling createNamedPlace.');
    }
    // verify required parameter 'personToken' is not null or undefined
    if (userToken === null || userToken === undefined) {
      throw new Error('Required parameter personToken was null or undefined when calling createNamedPlace.');
    }
    if (userToken !== undefined) {
      queryParameters['personToken'] = userToken;
    }

    return this.http.post<NamedPlace>(path, data, {params: queryParameters});
  }

  /**
   * Find a named place with id
   *
   * @param id Find document with the id
   * @param userToken User authentication token
   */
  public findById(id: string, userToken?: string, extraHttpRequestParams?: any): Observable<NamedPlace> {
    const path = this.basePath + '/named-places/{id}'
        .replace('{' + 'id' + '}', String(id));

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling findById.');
    }

    if (userToken !== undefined) {
      queryParameters['personToken'] = userToken;
    }

    return this.http.get<NamedPlace>(path, {params: queryParameters});
  }

  /**
   * Get all named places
   *
   * @param query
   * @param page
   * @param pageSize
   * @param extraHttpRequestParams
   * @returns {Observable<PagedResult<NamedPlace>>
   */
  public findAll(query: NamedPlaceQuery, page?: string, pageSize?: string, extraHttpRequestParams?: any): Observable<PagedResult<NamedPlace>> {
    const path = this.basePath + '/named-places';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'personToken' is not null or undefined
    if (page !== undefined) {
      queryParameters['page'] = page;
    }
    if (pageSize !== undefined) {
      queryParameters['pageSize'] = pageSize;
    }

    Object.keys(query).forEach(key => {
      if (typeof query[key] === 'string') {
        let targetKey = key === 'userToken' ? 'personToken' : key;
        queryParameters[targetKey] = query[key];
      } else if (typeof query[key] === 'boolean') {
        queryParameters[key] = query[key] ? 'true' : 'false';
      }
    });

    return this.http.get<PagedResult<NamedPlace>>(path, {params: queryParameters});
  }

  /**
   * Update Update existing named place
   *
   * @param id Id for the document
   * @param data Model instance data
   * @param userToken User authentication token
   */
  public update(id: string, data: NamedPlace, userToken: string, extraHttpRequestParams?: any): Observable<NamedPlace> {
    const path = this.basePath + '/named-places/{id}'
        .replace('{' + 'id' + '}', String(id));

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling documentUpdateWithUser.');
    }
    // verify required parameter 'data' is not null or undefined
    if (data === null || data === undefined) {
      throw new Error('Required parameter data was null or undefined when calling documentUpdateWithUser.');
    }
    // verify required parameter 'personToken' is not null or undefined
    if (userToken === null || userToken === undefined) {
      throw new Error('Required parameter personToken was null or undefined when calling documentUpdateWithUser.');
    }
    if (userToken !== undefined) {
      queryParameters['personToken'] = userToken;
    }

    return this.http.put<NamedPlace>(path, data, {params: queryParameters});
  }

  public reserve(id: string, personToken: string, extraHttpRequestParams?: {until?: string, personID?: string}): Observable<NamedPlace> {
    const path = this.basePath + '/named-places/{id}/reservation'
      .replace('{' + 'id' + '}', String(id));

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling documentUpdateWithUser.');
    }
    // verify required parameter 'personToken' is not null or undefined
    if (personToken === null || personToken === undefined) {
      throw new Error('Required parameter personToken was null or undefined when calling documentUpdateWithUser.');
    }
    if (personToken !== undefined) {
      queryParameters['personToken'] = personToken;
    }

    return this.http.post<NamedPlace>(path, undefined, {params: queryParameters});
  }

  public releaseReservation(id: string, personToken: string): Observable<NamedPlace> {
    const path = this.basePath + '/named-places/{id}/reservation'
      .replace('{' + 'id' + '}', String(id));

    let queryParameters = {};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling documentUpdateWithUser.');
    }
    // verify required parameter 'personToken' is not null or undefined
    if (personToken === null || personToken === undefined) {
      throw new Error('Required parameter personToken was null or undefined when calling documentUpdateWithUser.');
    }
    if (personToken !== undefined) {
      queryParameters['personToken'] = personToken;
    }

    return this.http.delete<NamedPlace>(path, {params: queryParameters});
  }

}
