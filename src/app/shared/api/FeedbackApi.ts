/**
 * API documentation
 * To use this api you need an access token. To get the token, send a post request with your email address
 * to api-users resource and one will be send to your. See below for information on how to use this api and
 * if you have any questions you can contact us at helpdesk@laji.fi.
 * Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.1
 * 
 *
 * NOTE: TEST This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import { Http, Headers, RequestOptionsArgs, Response, URLSearchParams } from '@angular/http';
import { Injectable, Optional } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { Feedback } from '../model/Feedback';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

@Injectable()
export class FeedbackApi {
    protected basePath = '/api';
    public defaultHeaders: Headers = new Headers({'Content-Type': 'application/json'});

    constructor(protected http: Http) {
    }
    /**
     * Send feedback. **Requires** that the api-users feedbackEMail has been set by the admins
     * 
     * @param data Model instance data
     * @param personToken Persons authentication token (if given users email will be the feedbacks reply to address)
     */
    public send(data?: Feedback, personToken?: string, extraHttpRequestParams?: any ): Observable<{}> {
        const path = this.basePath + '/feedback';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        if (personToken !== undefined) {
            queryParameters.set('personToken', personToken);
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(data);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
