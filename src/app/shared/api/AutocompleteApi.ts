/* tslint:disable */
/**
 * API documentation
 * To use this api you need an access token. To get the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: TEST This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Headers, Http, RequestOptionsArgs, Response, URLSearchParams } from '@angular/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import * as models from '../model';
import 'rxjs/Rx';

export enum AutocompleteMatchType {
  partial = <any> 'exact,partial',
  likely = <any> 'exact,likely'
}

export interface AutocompleteParams {
  field: string;
  q?: string;
  limit?: string;
  includePayload?: boolean;
  lang?: string;
  checklist?: string;
  informalTaxonGroup?: string;
  personToken?: string;
  matchType?: AutocompleteMatchType;
  onlySpecies?: boolean;
  onlyFinnish?: boolean;
  excludeNameType?: string;
  formID?: string;
}

@Injectable()
export class AutocompleteApi {
  protected basePath = '/api';
  public defaultHeaders: Headers = new Headers();

  constructor(protected http: Http) {
  }

  /**
   * Returns autocomplete object
   * @param params AutocompleteParams
   * @returns {Observable<R>}
   */
  public autocompleteFindByField(params: AutocompleteParams): Observable<Array<models.Autocomplete>> {
    const path = this.basePath + '/autocomplete/{field}'
        .replace('{' + 'field' + '}', String(params.field));

    let queryParameters = new URLSearchParams();
    let headerParams = this.defaultHeaders;
    // verify required parameter 'field' is not null or undefined
    if (params.field === null || params.field === undefined) {
      throw new Error('Required parameter field was null or undefined when calling autocompleteFindByField.');
    }
    if (params.q !== undefined) {
      queryParameters.set('q', params.q.replace('http://tun.fi/', ''));
    }

    Object.keys(params).map(key => {
      if (['field', 'q'].indexOf(key) > -1) {
        return;
      }
      if (typeof params[key] === 'boolean') {
        queryParameters.set(key, params[key] ? 'true' : 'false');
      } else {
        queryParameters.set(key, params[key]);
      }
    });

    let requestOptions: RequestOptionsArgs = {
      method: 'GET',
      headers: headerParams,
      search: queryParameters
    };

    return this.http.request(path, requestOptions)
      .map((response: Response) => {
        if (response.status === 204) {
          return undefined;
        } else {
          return response.json();
        }
      });
  }

}
