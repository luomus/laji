/**
 * API documentation
 * To use this api you need an access token. To get the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: TEST This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import {Http, Headers, RequestOptionsArgs, Response, URLSearchParams} from '@angular/http';
import {Injectable, Optional} from '@angular/core';
import {Observable} from 'rxjs/Observable';
import * as models from '../model';
import 'rxjs/Rx';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';
import {PagedResult} from "../model/PagedResult";

@Injectable()
export class DocumentApi {
    protected basePath = '/api';
    public defaultHeaders : Headers = new Headers({'Content-Type': 'application/json'});

    constructor(protected http: Http, @Optional() basePath: string) {
        if (basePath) {
            this.basePath = basePath;
        }
    }

    /**
     * Create a new document and persist it
     *
     * @param data Model instance data
     * @param userToken User authentication token
     */
    public create(data: models.Document, userToken: string, extraHttpRequestParams?: any ) : Observable<models.Document> {
        const path = this.basePath + '/documents';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling documentCreateWithUser.');
        }
        // verify required parameter 'userToken' is not null or undefined
        if (userToken === null || userToken === undefined) {
            throw new Error('Required parameter userToken was null or undefined when calling documentCreateWithUser.');
        }
        if (userToken !== undefined) {
            queryParameters.set('userToken', userToken);
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'POST',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(data);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Find a document with id
     *
     * @param id Find document with the id
     * @param userToken User authentication token
     */
    public findById(id: string, userToken: string, extraHttpRequestParams?: any ) : Observable<models.Document> {
        const path = this.basePath + '/documents/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling documentFindByIdWithUser.');
        }
        // verify required parameter 'userToken' is not null or undefined
        if (userToken === null || userToken === undefined) {
            throw new Error('Required parameter userToken was null or undefined when calling documentFindByIdWithUser.');
        }
        if (userToken !== undefined) {
            queryParameters.set('userToken', userToken);
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Get all documents
     *
     * @param userToken User authentication token
     * @param page Page number
     * @param pageSize Page size
     */
    public findAll(userToken: string, page?: string, pageSize?: string, extraHttpRequestParams?: any ) : Observable<PagedResult<Array<models.Document>>> {
        const path = this.basePath + '/documents';

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'userToken' is not null or undefined
        if (userToken === null || userToken === undefined) {
            throw new Error('Required parameter userToken was null or undefined when calling documentFindWithUser.');
        }
        if (page !== undefined) {
            queryParameters.set('page', page);
        }

        if (pageSize !== undefined) {
            queryParameters.set('pageSize', pageSize);
        }

        if (userToken !== undefined) {
            queryParameters.set('userToken', userToken);
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'GET',
            headers: headerParams,
            search: queryParameters
        };

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

    /**
     * Update existing document
     *
     * @param id Id for the document
     * @param data Model instance data
     * @param userToken User authentication token
     */
    public update(id: string, data: models.Document, userToken: string, extraHttpRequestParams?: any ) : Observable<models.Document> {
        const path = this.basePath + '/documents/{id}'
            .replace('{' + 'id' + '}', String(id));

        let queryParameters = new URLSearchParams();
        let headerParams = this.defaultHeaders;
        // verify required parameter 'id' is not null or undefined
        if (id === null || id === undefined) {
            throw new Error('Required parameter id was null or undefined when calling documentUpdateWithUser.');
        }
        // verify required parameter 'data' is not null or undefined
        if (data === null || data === undefined) {
            throw new Error('Required parameter data was null or undefined when calling documentUpdateWithUser.');
        }
        // verify required parameter 'userToken' is not null or undefined
        if (userToken === null || userToken === undefined) {
            throw new Error('Required parameter userToken was null or undefined when calling documentUpdateWithUser.');
        }
        if (userToken !== undefined) {
            queryParameters.set('userToken', userToken);
        }

        let requestOptions: RequestOptionsArgs = {
            method: 'PUT',
            headers: headerParams,
            search: queryParameters
        };
        requestOptions.body = JSON.stringify(data);

        return this.http.request(path, requestOptions)
            .map((response: Response) => {
                if (response.status === 204) {
                    return undefined;
                } else {
                    return response.json();
                }
            });
    }

}
