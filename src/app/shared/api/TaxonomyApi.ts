/* tslint:disable */
/**
 * API documentation
 * To use this api you need an access token. To getList the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs/Observable';
import { PagedResult } from '../model/PagedResult';
import { Taxonomy, TaxonomyImage } from '../model/Taxonomy';
import { HttpClient } from '@angular/common/http';
import { Util } from '../service/util.service';
import { LajiTaxonSearch } from '../model/LajiTaxonSearch';
import { environment } from '../../../environments/environment';

/* tslint:disable:no-unused-variable member-ordering */

'use strict';

@Injectable({providedIn: 'root'})
export class TaxonomyApi {
  protected basePath = environment.apiBase;

  constructor(protected http: HttpClient) {
  }

  /**
   * return taxon data with the given query
   *
   * @param id id of the taxon
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   */
  public taxonomyFindBySubject(id: string, lang?: string, extraHttpRequestParams?: any): Observable<Taxonomy> {
    const path = this.basePath + '/taxa/{id}'
        .replace('{' + 'id' + '}', String(id));

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling taxonomyFindBySubject.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get(path, {params: queryParameters});
  }


  /**
   * return bold information
   */
  public bold(scientificName: string, extraHttpRequestParams?: any): Observable<Array<Taxonomy>> {
    const path = this.basePath + '/taxa/bold';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (scientificName === null || scientificName === undefined) {
      throw new Error('Required parameter scientificName was null or undefined when calling bold.');
    }
    if (scientificName !== undefined) {
      queryParameters['scientificName'] = scientificName;
    }

    return this.http.get<Taxonomy[]>(path, {params: queryParameters});
  }

  /**
   * return children of the given taxon
   *
   * @param id id of the taxon
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   * @param maxLevel How many levels of children to show (default: 1)
   */
  public taxonomyFindChildren(id: string, lang?: string, maxLevel?: string, extraHttpRequestParams?: any): Observable<Array<Taxonomy>> {
    const path = this.basePath + '/taxa/{id}/children'
        .replace('{' + 'id' + '}', String(id));

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling taxonomyFindChildren.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    if (maxLevel !== undefined) {
      queryParameters['maxLevel'] = maxLevel;
    }

    return this.http.get<Taxonomy[]>(path, {params: queryParameters});
  }

  /**
   * return description texts from Laji.fi taxonomy database, EOL, Naturforskaren, etc.
   *
   * @param id id of the taxon
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   */
  public taxonomyFindDescriptions(id: string, lang?: string, langFallback?: boolean, extraHttpRequestParams?: any): Observable<Array<any>> {
    const path = `${this.basePath}/taxa/${id}/descriptions?blacklist=eol%3Aapi`;

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling taxonomyFindDescriptions.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }
    if (langFallback !== undefined) {
      queryParameters['langFallback'] = langFallback ? 'true' : 'false';
    }

    return this.http.get<any[]>(path, {params: queryParameters});
  }

  /**
   * return media object of the given taxon
   *
   * @param id id of the taxon
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   */
  public taxonomyFindMedia(id: string, lang?: string, extraHttpRequestParams?: any): Observable<Array<TaxonomyImage>> {
    const path = `${this.basePath}/taxa/${id}/media?blacklist=eol%3Aapi`;

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling taxonomyFindMedia.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get<TaxonomyImage[]>(path, {params: queryParameters});
  }

  /**
   * return taxons parents all the way up to biota
   *
   * @param id id of the taxon
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   */
  public taxonomyFindParents(id: string, lang?: string, extraHttpRequestParams?: any): Observable<Array<Taxonomy>> {
    const path = this.basePath + '/taxa/{id}/parents'
        .replace('{' + 'id' + '}', String(id));

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling taxonomyFindParents.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    return this.http.get<Taxonomy[]>(path, {params: queryParameters});
  }

  /**
   * return species belonging to the given taxon
   *
   * @param id id of the taxon
   * @param lang Language of fields that have multiple languages. Return english if asked language not found. If multi is selected fields will contain language objects
   * @param informalGroupFilters Filter based on given informal groups
   * @param adminStatusFilters Filter based on administrative statuses
   * @param redListStatusFilters Filter based on the latest IUCN status
   * @param typesOfOccurrenceFilters Filter based on types of occurrence
   * @param invasiveSpeciesFilter Will include only invasive species
   * @param page Page number
   * @param pageSize Page size
   * @param sortOrder Sort order
   */
  public taxonomyFindSpecies(id: string, lang?: string, informalGroupFilters?: string, adminStatusFilters?: string, redListStatusFilters?: string, typesOfOccurrenceFilters?: string, invasiveSpeciesFilter?: boolean, page?: string, pageSize?: string, sortOrder?: string, extraHttpRequestParams?: any): Observable<PagedResult<Taxonomy>> {
    const path = this.basePath + '/taxa/{id}/species'
        .replace('{' + 'id' + '}', String(id));

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'id' is not null or undefined
    if (id === null || id === undefined) {
      throw new Error('Required parameter id was null or undefined when calling taxonomyFindSpecies.');
    }
    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }

    if (informalGroupFilters !== undefined) {
      queryParameters['informalGroupFilters'] = informalGroupFilters
    }

    if (adminStatusFilters !== undefined) {
      queryParameters['adminStatusFilters'] = adminStatusFilters
    }

    if (redListStatusFilters !== undefined) {
      queryParameters['redListStatusFilters'] = redListStatusFilters
    }

    if (typesOfOccurrenceFilters !== undefined) {
      queryParameters['typesOfOccurrenceFilters'] = typesOfOccurrenceFilters
    }

    if (invasiveSpeciesFilter !== undefined) {
      queryParameters['invasiveSpeciesFilter'] = invasiveSpeciesFilter ? 'true' : 'false'
    }

    if (page !== undefined) {
      queryParameters['page'] = page
    }

    if (pageSize !== undefined) {
      queryParameters['pageSize'] = pageSize
    }

    if (sortOrder !== undefined) {
      queryParameters['sortOrder'] = sortOrder
    }

    return this.http.get<PagedResult<Taxonomy>>(path, {params: queryParameters});
  }

  public species(query: any = {}, lang?: string, page?: string, pageSize?: string, sortOrder?: string): Observable<PagedResult<Taxonomy>> {
    const path = this.basePath + '/taxa' + (query && query.id ? '/' + query.id : '') + '/species';

    const queryParameters: any = {...Util.removeUndefinedFromObject(query)};
    delete queryParameters.id;

    if (lang !== undefined) {
      queryParameters['lang'] = lang;
    }
    if (page !== undefined) {
      queryParameters['page'] = page
    }

    if (pageSize !== undefined) {
      queryParameters['pageSize'] = pageSize
    }

    if (sortOrder !== undefined) {
      queryParameters['sortOrder'] = sortOrder
    }

    return this.http.get<PagedResult<Taxonomy>>(path, {params: queryParameters});
  }

  /**
   * Search taxon data with the given query
   *
   * @param query search string
   * @param limit limit the pageSize of results (defaults to 10)
   * @param checklist search taxon from specified checklist (defaults to master)
   */
  public taxonomySearch(query: string, limit?: string, checklist?: string, extraHttpRequestParams?: any): Observable<LajiTaxonSearch> {
    const path = this.basePath + '/taxa/search';

    const queryParameters = {...Util.removeUndefinedFromObject(extraHttpRequestParams)};
    // verify required parameter 'query' is not null or undefined
    if (query === null || query === undefined) {
      throw new Error('Required parameter query was null or undefined when calling taxonomySearch.');
    }
    if (query !== undefined) {
      queryParameters['query'] = query
    }

    if (limit !== undefined) {
      queryParameters['limit'] = limit
    }

    if (checklist !== undefined) {
      queryParameters['checklist'] = checklist
    }

    return this.http.get(path, {params: queryParameters});
  }

}
