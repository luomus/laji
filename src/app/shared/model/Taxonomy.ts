/**
 * API documentation
 * To use this api you need an access token. To get the token, send a post request with your email address to api-users resource and one will be send to your. See below for information on how to use this api and if you have any questions you can contact us at helpdesk@laji.fi.  Place refer to [schema.laji.fi](http://schema.laji.fi/) for more information about the used vocabulary
 *
 * OpenAPI spec version: 0.0.1
 *
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

'use strict';
import { Taxonomy, TaxonomyDescriptionVariable } from './index';

export interface Taxonomy {

    id?: string;

    redListStatus2000Finland?: string;

    redListStatus2010Finland?: string;

    redListStatus2015Finland?: string;

    alsoKnownAs?: Array<string>;

    birdlifeCode?: string;

    breedingSecureLevel?: string;

    circumscription?: string;

    customReportFormLink?: string;

    distributionMapFinland?: string;

    euringCode?: string;

    euringNumber?: number;

    externalLinkURL?: string;

    hasAdminStatus?: Array<string>;

    ingressText?: string;

    winteringSecureLevel?: string;

    typeOfOccurrenceInFinlandNotes?: string;

    typeOfOccurrenceInFinland?: Array<string>;

    tradeName?: Array<string>;

    invasiveCitizenActionsText?: string;

    secureLevel?: string;

    reproduction?: string;

    originalPublication?: Array<string>;

    /**
     *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
     */
    obsoleteVernacularName?: Array<string>;

    notes?: string;

    nestSiteSecureLevel?: string;

    invasiveEffectText?: string;

    naturaAreaSecureLevel?: string;

    nameDecidedBy?: string;

    misappliedNameNotes?: string;

    isPartOfInformalTaxonGroup?: Array<string>;

    invasivePreventionMethodsText?: string;

    invasiveSpeciesCategory?: string;

    taxonRank?: string;

    isPartOf?: string;

    scientificName?: string;

    scientificNameAuthorship?: string;

    nameAccordingTo?: string;

    /**
     *  If lang parameter is 'multi' this will be a lang object instead of a string or an array of strings!
     */
    vernacularName?: string;

    misappliedName?: Array<string>;

    occurrenceInFinland?: string;

    checklistStatus?: string;

    higherTaxaStatus?: boolean;

    finnishSpeciesTaggingStatus?: boolean;

    taxonExpert?: Array<string>;

    taxonEditor?: Array<string>;

    informalTaxonGroups?: Array<string>;

    alternativeVernacularNames?: Array<string>;

    occurrences?: Array<any>;

    synonyms?: Array<Taxonomy>;

    children?: Array<Taxonomy>;

    /**
     * occurs in Finland
     */
    finnishSpecies?: boolean;

    /**
     * true if has parents
     */
    hasParent?: boolean;

    /**
     * true if has children
     */
    hasChildren?: boolean;
}

export interface TaxonomyDescriptionVariable {

    title?: string;
    
    content?: string;

}

export interface TaxonomyDescriptionGroup {

    title?: string;
    
    variables?: Array<TaxonomyDescriptionVariable>;

}

export interface TaxonomyDescription {

    id?: string;

    title?: string;

    groups?: Array<TaxonomyDescriptionGroup>;

}

export interface TaxonomyImage {
    
    author?: string;
    
    copyrightOwner?: string;
    
    fullURL?: string;
    
    licenceAbbreviation?: string;
    
    licenceDescription?: string;
    
    source?: string;
    
    thumbnailURL?: string;

}